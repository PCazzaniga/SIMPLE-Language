/*
 * Copyright (c) 2025 PCazzaniga (github.com)
 *
 *     simpleBaseVisitor.java is part of SIMPLE.
 *
 *     SIMPLE is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     SIMPLE is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with SIMPLE.  If not, see <http://www.gnu.org/licenses/>.
 */

// Generated by ANTLR 4.13.2
import org.antlr.v4.runtime.tree.AbstractParseTreeVisitor;

@SuppressWarnings("CheckReturnValue")
class simpleBaseVisitor<T> extends AbstractParseTreeVisitor<T> implements simpleVisitor<T> {
	
	@Override public T visitFile(simpleParser.FileContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitInformation(simpleParser.InformationContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitType_decl(simpleParser.Type_declContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitFun_decl(simpleParser.Fun_declContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitFun_def(simpleParser.Fun_defContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitFun_body(simpleParser.Fun_bodyContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitScope_block(simpleParser.Scope_blockContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitComment(simpleParser.CommentContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitNl(simpleParser.NlContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitStatement(simpleParser.StatementContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitCloser(simpleParser.CloserContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitFlow_control(simpleParser.Flow_controlContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitBranch(simpleParser.BranchContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitIf_cond(simpleParser.If_condContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitElif_cond(simpleParser.Elif_condContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitElse_cond(simpleParser.Else_condContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitLoop(simpleParser.LoopContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitCondLoop(simpleParser.CondLoopContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitQuantLoop(simpleParser.QuantLoopContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitCondition(simpleParser.ConditionContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitReturn(simpleParser.ReturnContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitInstruction(simpleParser.InstructionContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitVar_decl(simpleParser.Var_declContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitVar_def(simpleParser.Var_defContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitVar_init(simpleParser.Var_initContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitExpr(simpleParser.ExprContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitAssignment(simpleParser.AssignmentContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitListInsertion(simpleParser.ListInsertionContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitListRemoval(simpleParser.ListRemovalContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitText2List(simpleParser.Text2ListContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitList2Text(simpleParser.List2TextContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitValue(simpleParser.ValueContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitDirect_value(simpleParser.Direct_valueContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitVariable(simpleParser.VariableContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitVar_name(simpleParser.Var_nameContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitStruct_access(simpleParser.Struct_accessContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitAccess(simpleParser.AccessContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitReserved(simpleParser.ReservedContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitLiteral(simpleParser.LiteralContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitNumber(simpleParser.NumberContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitStruct_lit(simpleParser.Struct_litContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitSequence(simpleParser.SequenceContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitList(simpleParser.ListContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitKit(simpleParser.KitContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitOperation(simpleParser.OperationContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitArith_op(simpleParser.Arith_opContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitAr_oprnd(simpleParser.Ar_oprndContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitLogic_op(simpleParser.Logic_opContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitLog_oprnd(simpleParser.Log_oprndContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitCompare_op(simpleParser.Compare_opContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitComp_oprnd(simpleParser.Comp_oprndContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitFun_call(simpleParser.Fun_callContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitFun_name(simpleParser.Fun_nameContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitType(simpleParser.TypeContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitDeclared_type(simpleParser.Declared_typeContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitStruct_type(simpleParser.Struct_typeContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitSeq_type(simpleParser.Seq_typeContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitList_type(simpleParser.List_typeContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitKit_type(simpleParser.Kit_typeContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitParam(simpleParser.ParamContext ctx) { return visitChildren(ctx); }
}