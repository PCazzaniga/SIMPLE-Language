/*
 * Copyright (c) 2025 PCazzaniga (github.com)
 *
 *     simpleListener.java is part of SIMPLE.
 *
 *     SIMPLE is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     SIMPLE is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with SIMPLE.  If not, see <http://www.gnu.org/licenses/>.
 */

// Generated by ANTLR 4.13.2
import org.antlr.v4.runtime.tree.ParseTreeListener;

public interface simpleListener extends ParseTreeListener {
	
	void enterFile(simpleParser.FileContext ctx);
	
	void exitFile(simpleParser.FileContext ctx);
	
	void enterInformation(simpleParser.InformationContext ctx);
	
	void exitInformation(simpleParser.InformationContext ctx);
	
	void enterType_decl(simpleParser.Type_declContext ctx);
	
	void exitType_decl(simpleParser.Type_declContext ctx);
	
	void enterFun_decl(simpleParser.Fun_declContext ctx);
	
	void exitFun_decl(simpleParser.Fun_declContext ctx);
	
	void enterFun_def(simpleParser.Fun_defContext ctx);
	
	void exitFun_def(simpleParser.Fun_defContext ctx);
	
	void enterFun_body(simpleParser.Fun_bodyContext ctx);
	
	void exitFun_body(simpleParser.Fun_bodyContext ctx);
	
	void enterScope_block(simpleParser.Scope_blockContext ctx);
	
	void exitScope_block(simpleParser.Scope_blockContext ctx);
	
	void enterComment(simpleParser.CommentContext ctx);
	
	void exitComment(simpleParser.CommentContext ctx);
	
	void enterNl(simpleParser.NlContext ctx);
	
	void exitNl(simpleParser.NlContext ctx);
	
	void enterStatement(simpleParser.StatementContext ctx);
	
	void exitStatement(simpleParser.StatementContext ctx);
	
	void enterCloser(simpleParser.CloserContext ctx);
	
	void exitCloser(simpleParser.CloserContext ctx);
	
	void enterFlow_control(simpleParser.Flow_controlContext ctx);
	
	void exitFlow_control(simpleParser.Flow_controlContext ctx);
	
	void enterBranch(simpleParser.BranchContext ctx);
	
	void exitBranch(simpleParser.BranchContext ctx);
	
	void enterIf_cond(simpleParser.If_condContext ctx);
	
	void exitIf_cond(simpleParser.If_condContext ctx);
	
	void enterElif_cond(simpleParser.Elif_condContext ctx);
	
	void exitElif_cond(simpleParser.Elif_condContext ctx);
	
	void enterElse_cond(simpleParser.Else_condContext ctx);
	
	void exitElse_cond(simpleParser.Else_condContext ctx);
	
	void enterLoop(simpleParser.LoopContext ctx);
	
	void exitLoop(simpleParser.LoopContext ctx);
	
	void enterCondLoop(simpleParser.CondLoopContext ctx);
	
	void exitCondLoop(simpleParser.CondLoopContext ctx);
	
	void enterQuantLoop(simpleParser.QuantLoopContext ctx);
	
	void exitQuantLoop(simpleParser.QuantLoopContext ctx);
	
	void enterCondition(simpleParser.ConditionContext ctx);
	
	void exitCondition(simpleParser.ConditionContext ctx);
	
	void enterReturn(simpleParser.ReturnContext ctx);
	
	void exitReturn(simpleParser.ReturnContext ctx);
	
	void enterInstruction(simpleParser.InstructionContext ctx);
	
	void exitInstruction(simpleParser.InstructionContext ctx);
	
	void enterVar_decl(simpleParser.Var_declContext ctx);
	
	void exitVar_decl(simpleParser.Var_declContext ctx);
	
	void enterVar_def(simpleParser.Var_defContext ctx);
	
	void exitVar_def(simpleParser.Var_defContext ctx);
	
	void enterVar_init(simpleParser.Var_initContext ctx);
	
	void exitVar_init(simpleParser.Var_initContext ctx);
	
	void enterExpr(simpleParser.ExprContext ctx);
	
	void exitExpr(simpleParser.ExprContext ctx);
	
	void enterAssignment(simpleParser.AssignmentContext ctx);
	
	void exitAssignment(simpleParser.AssignmentContext ctx);
	
	void enterListInsertion(simpleParser.ListInsertionContext ctx);
	
	void exitListInsertion(simpleParser.ListInsertionContext ctx);
	
	void enterListRemoval(simpleParser.ListRemovalContext ctx);
	
	void exitListRemoval(simpleParser.ListRemovalContext ctx);
	
	void enterText2List(simpleParser.Text2ListContext ctx);
	
	void exitText2List(simpleParser.Text2ListContext ctx);
	
	void enterList2Text(simpleParser.List2TextContext ctx);
	
	void exitList2Text(simpleParser.List2TextContext ctx);
	
	void enterValue(simpleParser.ValueContext ctx);
	
	void exitValue(simpleParser.ValueContext ctx);
	
	void enterDirect_value(simpleParser.Direct_valueContext ctx);
	
	void exitDirect_value(simpleParser.Direct_valueContext ctx);
	
	void enterVariable(simpleParser.VariableContext ctx);
	
	void exitVariable(simpleParser.VariableContext ctx);
	
	void enterVar_name(simpleParser.Var_nameContext ctx);
	
	void exitVar_name(simpleParser.Var_nameContext ctx);
	
	void enterStruct_access(simpleParser.Struct_accessContext ctx);
	
	void exitStruct_access(simpleParser.Struct_accessContext ctx);
	
	void enterAccess(simpleParser.AccessContext ctx);
	
	void exitAccess(simpleParser.AccessContext ctx);
	
	void enterReserved(simpleParser.ReservedContext ctx);
	
	void exitReserved(simpleParser.ReservedContext ctx);
	
	void enterLiteral(simpleParser.LiteralContext ctx);
	
	void exitLiteral(simpleParser.LiteralContext ctx);
	
	void enterNumber(simpleParser.NumberContext ctx);
	
	void exitNumber(simpleParser.NumberContext ctx);
	
	void enterStruct_lit(simpleParser.Struct_litContext ctx);
	
	void exitStruct_lit(simpleParser.Struct_litContext ctx);
	
	void enterSequence(simpleParser.SequenceContext ctx);
	
	void exitSequence(simpleParser.SequenceContext ctx);
	
	void enterList(simpleParser.ListContext ctx);
	
	void exitList(simpleParser.ListContext ctx);
	
	void enterKit(simpleParser.KitContext ctx);
	
	void exitKit(simpleParser.KitContext ctx);
	
	void enterOperation(simpleParser.OperationContext ctx);
	
	void exitOperation(simpleParser.OperationContext ctx);
	
	void enterArith_op(simpleParser.Arith_opContext ctx);
	
	void exitArith_op(simpleParser.Arith_opContext ctx);
	
	void enterAr_oprnd(simpleParser.Ar_oprndContext ctx);
	
	void exitAr_oprnd(simpleParser.Ar_oprndContext ctx);
	
	void enterLogic_op(simpleParser.Logic_opContext ctx);
	
	void exitLogic_op(simpleParser.Logic_opContext ctx);
	
	void enterLog_oprnd(simpleParser.Log_oprndContext ctx);
	
	void exitLog_oprnd(simpleParser.Log_oprndContext ctx);
	
	void enterCompare_op(simpleParser.Compare_opContext ctx);
	
	void exitCompare_op(simpleParser.Compare_opContext ctx);
	
	void enterComp_oprnd(simpleParser.Comp_oprndContext ctx);
	
	void exitComp_oprnd(simpleParser.Comp_oprndContext ctx);
	
	void enterFun_call(simpleParser.Fun_callContext ctx);
	
	void exitFun_call(simpleParser.Fun_callContext ctx);
	
	void enterFun_name(simpleParser.Fun_nameContext ctx);
	
	void exitFun_name(simpleParser.Fun_nameContext ctx);
	
	void enterType(simpleParser.TypeContext ctx);
	
	void exitType(simpleParser.TypeContext ctx);
	
	void enterDeclared_type(simpleParser.Declared_typeContext ctx);
	
	void exitDeclared_type(simpleParser.Declared_typeContext ctx);
	
	void enterStruct_type(simpleParser.Struct_typeContext ctx);
	
	void exitStruct_type(simpleParser.Struct_typeContext ctx);
	
	void enterSeq_type(simpleParser.Seq_typeContext ctx);
	
	void exitSeq_type(simpleParser.Seq_typeContext ctx);
	
	void enterList_type(simpleParser.List_typeContext ctx);
	
	void exitList_type(simpleParser.List_typeContext ctx);
	
	void enterKit_type(simpleParser.Kit_typeContext ctx);
	
	void exitKit_type(simpleParser.Kit_typeContext ctx);
	
	void enterParam(simpleParser.ParamContext ctx);
	
	void exitParam(simpleParser.ParamContext ctx);
}