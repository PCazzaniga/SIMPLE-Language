/*
 * Copyright (c) 2025 PCazzaniga (github.com)
 *
 *     simpleParser.java is part of SIMPLE.
 *
 *     SIMPLE is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     SIMPLE is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with SIMPLE.  If not, see <http://www.gnu.org/licenses/>.
 */

// Generated by ANTLR 4.13.2
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue", "this-escape"})
public class simpleParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.13.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, Text=16, Boolean=17, 
		TYPENAME=18, NAME=19, NUM=20, COMMENT=21, NEWTYPE=22, DEFINE=23, MAIN=24, 
		RESULT=25, PARAMETERS=26, SOLO_PARAMETERS=27, IF=28, THEN=29, ELSEIF=30, 
		ELSE=31, REPEAT=32, WHILE=33, TIMES=34, RETURN=35, PREPARE=36, NAMED=37, 
		VALUED=38, SET=39, TO=40, INSERT=41, IN=42, REMOVE=43, SPLIT=44, MERGE=45, 
		NUMBER=46, STRING=47, BOOL=48, SEQUENCE=49, LIST=50, KIT=51, POSITION=52, 
		ATFIELD=53, OUTP=54, INP=55, COUNTER=56, SIZEOF=57, RANDOM=58, NULL=59, 
		ADD=60, SUB=61, MULT=62, DIV=63, MODULUS=64, AND=65, OR=66, NOT=67, GT=68, 
		LT=69, EQ=70, CALL=71, ARGUMENTS=72, TRUE=73, FALSE=74, TAB=75, INDENT=76, 
		DEDENT=77, NEWLINE=78, EXTRANEOUS_INPUT=79;
	public static final int
		RULE_file = 0, RULE_information = 1, RULE_type_decl = 2, RULE_fun_decl = 3, 
		RULE_fun_def = 4, RULE_fun_body = 5, RULE_scope_block = 6, RULE_comment = 7, 
		RULE_nl = 8, RULE_statement = 9, RULE_closer = 10, RULE_flow_control = 11, 
		RULE_branch = 12, RULE_if_cond = 13, RULE_elif_cond = 14, RULE_else_cond = 15, 
		RULE_loop = 16, RULE_loop_def = 17, RULE_condition = 18, RULE_return = 19, 
		RULE_instruction = 20, RULE_var_decl = 21, RULE_var_def = 22, RULE_var_init = 23, 
		RULE_expr = 24, RULE_assignment = 25, RULE_list_op = 26, RULE_value = 27, 
		RULE_direct_value = 28, RULE_variable = 29, RULE_var_name = 30, RULE_struct_access = 31, 
		RULE_access = 32, RULE_reserved = 33, RULE_literal = 34, RULE_number = 35, 
		RULE_struct_lit = 36, RULE_sequence = 37, RULE_list = 38, RULE_kit = 39, 
		RULE_operation = 40, RULE_arith_op = 41, RULE_ar_oprnd = 42, RULE_logic_op = 43, 
		RULE_log_oprnd = 44, RULE_compare_op = 45, RULE_comp_oprnd = 46, RULE_fun_call = 47, 
		RULE_fun_name = 48, RULE_type = 49, RULE_declared_type = 50, RULE_struct_type = 51, 
		RULE_seq_type = 52, RULE_list_type = 53, RULE_kit_type = 54, RULE_param = 55;
	private static String[] makeRuleNames() {
		return new String[] {
			"file", "information", "type_decl", "fun_decl", "fun_def", "fun_body", 
			"scope_block", "comment", "nl", "statement", "closer", "flow_control", 
			"branch", "if_cond", "elif_cond", "else_cond", "loop", "loop_def", "condition", 
			"return", "instruction", "var_decl", "var_def", "var_init", "expr", "assignment", 
			"list_op", "value", "direct_value", "variable", "var_name", "struct_access", 
			"access", "reserved", "literal", "number", "struct_lit", "sequence", 
			"list", "kit", "operation", "arith_op", "ar_oprnd", "logic_op", "log_oprnd", 
			"compare_op", "comp_oprnd", "fun_call", "fun_name", "type", "declared_type", 
			"struct_type", "seq_type", "list_type", "kit_type", "param"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'.'", "':'", "', '", "','", "';'", "'('", "')'", "'-'", "'['", 
			"']'", "'|'", "'; '", "'{'", "'}'", "' '", null, null, null, null, null, 
			null, "' as a new type'", "'Define a procedure with name '", "'Main'", 
			"' that produces a '", "' using '", "' that uses a '", "'If '", "' then'", 
			"'Else if '", "'Else'", "'Repeat '", "'while '", "' times'", "'Return '", 
			"'Prepare a '", "' with name '", "' and value of '", "'Set '", "' to value of '", 
			"'Insert '", "' in '", "'Remove from '", "'Split '", "'Merge '", "'Number'", 
			"'Text'", "'Boolean'", "'Sequence of '", "'List of '", "'Kit of '", "' at position '", 
			"'@'", "'Output'", "'Input'", "'Counter'", "'size of '", "'Random'", 
			"'Nothing'", "' + '", "' - '", "' * '", "' / '", "' mod '", "' and '", 
			"' or '", "'not '", "' > '", "' < '", "' = '", "'Execute procedure '", 
			"' with '", "'True'", "'False'", null, "'Indent'", "'Dedent'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, "Text", "Boolean", "TYPENAME", "NAME", "NUM", 
			"COMMENT", "NEWTYPE", "DEFINE", "MAIN", "RESULT", "PARAMETERS", "SOLO_PARAMETERS", 
			"IF", "THEN", "ELSEIF", "ELSE", "REPEAT", "WHILE", "TIMES", "RETURN", 
			"PREPARE", "NAMED", "VALUED", "SET", "TO", "INSERT", "IN", "REMOVE", 
			"SPLIT", "MERGE", "NUMBER", "STRING", "BOOL", "SEQUENCE", "LIST", "KIT", 
			"POSITION", "ATFIELD", "OUTP", "INP", "COUNTER", "SIZEOF", "RANDOM", 
			"NULL", "ADD", "SUB", "MULT", "DIV", "MODULUS", "AND", "OR", "NOT", "GT", 
			"LT", "EQ", "CALL", "ARGUMENTS", "TRUE", "FALSE", "TAB", "INDENT", "DEDENT", 
			"NEWLINE", "EXTRANEOUS_INPUT"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override
	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "simple.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public simpleParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FileContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(simpleParser.EOF, 0); }
		public List<CommentContext> comment() {
			return getRuleContexts(CommentContext.class);
		}
		public CommentContext comment(int i) {
			return getRuleContext(CommentContext.class,i);
		}
		public List<InformationContext> information() {
			return getRuleContexts(InformationContext.class);
		}
		public InformationContext information(int i) {
			return getRuleContext(InformationContext.class,i);
		}
		public List<NlContext> nl() {
			return getRuleContexts(NlContext.class);
		}
		public NlContext nl(int i) {
			return getRuleContext(NlContext.class,i);
		}
		public FileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitFile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitFile(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileContext file() throws RecognitionException {
		FileContext _localctx = new FileContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(121); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(114);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COMMENT:
					{
					setState(112);
					comment();
					}
					break;
				case DEFINE:
				case PREPARE:
					{
					setState(113);
					information();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(117); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(116);
					nl();
					}
					}
					setState(119); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==NEWLINE );
				}
				}
				setState(123); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 68729962496L) != 0) );
			setState(125);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InformationContext extends ParserRuleContext {
		public Var_declContext var_decl() {
			return getRuleContext(Var_declContext.class,0);
		}
		public Type_declContext type_decl() {
			return getRuleContext(Type_declContext.class,0);
		}
		public Fun_declContext fun_decl() {
			return getRuleContext(Fun_declContext.class,0);
		}
		public InformationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_information; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterInformation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitInformation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitInformation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InformationContext information() throws RecognitionException {
		InformationContext _localctx = new InformationContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_information);
		try {
			setState(134);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PREPARE:
				enterOuterAlt(_localctx, 1);
				{
				setState(129);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
				case 1:
					{
					setState(127);
					var_decl();
					}
					break;
				case 2:
					{
					setState(128);
					type_decl();
					}
					break;
				}
				setState(131);
				match(T__0);
				}
				break;
			case DEFINE:
				enterOuterAlt(_localctx, 2);
				{
				setState(133);
				fun_decl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_declContext extends ParserRuleContext {
		public TerminalNode PREPARE() { return getToken(simpleParser.PREPARE, 0); }
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public TerminalNode NAMED() { return getToken(simpleParser.NAMED, 0); }
		public TerminalNode TYPENAME() { return getToken(simpleParser.TYPENAME, 0); }
		public TerminalNode NEWTYPE() { return getToken(simpleParser.NEWTYPE, 0); }
		public Type_declContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_decl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterType_decl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitType_decl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitType_decl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_declContext type_decl() throws RecognitionException {
		Type_declContext _localctx = new Type_declContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_type_decl);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(136);
			match(PREPARE);
			setState(137);
			type();
			setState(138);
			match(NAMED);
			setState(139);
			match(TYPENAME);
			setState(140);
			match(NEWTYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Fun_declContext extends ParserRuleContext {
		public Fun_defContext fun_def() {
			return getRuleContext(Fun_defContext.class,0);
		}
		public NlContext nl() {
			return getRuleContext(NlContext.class,0);
		}
		public Fun_bodyContext fun_body() {
			return getRuleContext(Fun_bodyContext.class,0);
		}
		public Fun_declContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fun_decl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterFun_decl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitFun_decl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitFun_decl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fun_declContext fun_decl() throws RecognitionException {
		Fun_declContext _localctx = new Fun_declContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_fun_decl);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(142);
			fun_def();
			setState(143);
			match(T__1);
			setState(144);
			nl();
			setState(145);
			fun_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Fun_defContext extends ParserRuleContext {
		public Token name;
		public TerminalNode DEFINE() { return getToken(simpleParser.DEFINE, 0); }
		public TerminalNode NAME() { return getToken(simpleParser.NAME, 0); }
		public TerminalNode MAIN() { return getToken(simpleParser.MAIN, 0); }
		public TerminalNode RESULT() { return getToken(simpleParser.RESULT, 0); }
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public TerminalNode SOLO_PARAMETERS() { return getToken(simpleParser.SOLO_PARAMETERS, 0); }
		public List<ParamContext> param() {
			return getRuleContexts(ParamContext.class);
		}
		public ParamContext param(int i) {
			return getRuleContext(ParamContext.class,i);
		}
		public TerminalNode PARAMETERS() { return getToken(simpleParser.PARAMETERS, 0); }
		public Fun_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fun_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterFun_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitFun_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitFun_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fun_defContext fun_def() throws RecognitionException {
		Fun_defContext _localctx = new Fun_defContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_fun_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(147);
			match(DEFINE);
			setState(148);
			((Fun_defContext)_localctx).name = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==NAME || _la==MAIN) ) {
				((Fun_defContext)_localctx).name = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(171);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESULT:
				{
				{
				setState(149);
				match(RESULT);
				setState(150);
				type();
				setState(160);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARAMETERS) {
					{
					setState(151);
					match(PARAMETERS);
					setState(152);
					param();
					setState(157);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__2) {
						{
						{
						setState(153);
						match(T__2);
						setState(154);
						param();
						}
						}
						setState(159);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				}
				break;
			case SOLO_PARAMETERS:
				{
				{
				setState(162);
				match(SOLO_PARAMETERS);
				setState(163);
				param();
				setState(168);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__2) {
					{
					{
					setState(164);
					match(T__2);
					setState(165);
					param();
					}
					}
					setState(170);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case T__1:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Fun_bodyContext extends ParserRuleContext {
		public TerminalNode INDENT() { return getToken(simpleParser.INDENT, 0); }
		public ReturnContext return_() {
			return getRuleContext(ReturnContext.class,0);
		}
		public List<NlContext> nl() {
			return getRuleContexts(NlContext.class);
		}
		public NlContext nl(int i) {
			return getRuleContext(NlContext.class,i);
		}
		public TerminalNode DEDENT() { return getToken(simpleParser.DEDENT, 0); }
		public List<CommentContext> comment() {
			return getRuleContexts(CommentContext.class);
		}
		public CommentContext comment(int i) {
			return getRuleContext(CommentContext.class,i);
		}
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public Fun_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fun_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterFun_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitFun_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitFun_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fun_bodyContext fun_body() throws RecognitionException {
		Fun_bodyContext _localctx = new Fun_bodyContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_fun_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(173);
			match(INDENT);
			setState(180);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & 1125899937548417L) != 0)) {
				{
				setState(178);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COMMENT:
					{
					setState(174);
					comment();
					setState(175);
					nl();
					}
					break;
				case IF:
				case REPEAT:
				case PREPARE:
				case SET:
				case INSERT:
				case REMOVE:
				case SPLIT:
				case MERGE:
				case CALL:
					{
					setState(177);
					statement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(182);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(183);
			return_();
			setState(184);
			match(T__0);
			setState(185);
			nl();
			setState(186);
			match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Scope_blockContext extends ParserRuleContext {
		public TerminalNode INDENT() { return getToken(simpleParser.INDENT, 0); }
		public CloserContext closer() {
			return getRuleContext(CloserContext.class,0);
		}
		public TerminalNode DEDENT() { return getToken(simpleParser.DEDENT, 0); }
		public List<CommentContext> comment() {
			return getRuleContexts(CommentContext.class);
		}
		public CommentContext comment(int i) {
			return getRuleContext(CommentContext.class,i);
		}
		public List<NlContext> nl() {
			return getRuleContexts(NlContext.class);
		}
		public NlContext nl(int i) {
			return getRuleContext(NlContext.class,i);
		}
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public Scope_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scope_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterScope_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitScope_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitScope_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Scope_blockContext scope_block() throws RecognitionException {
		Scope_blockContext _localctx = new Scope_blockContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_scope_block);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(188);
			match(INDENT);
			setState(195);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,12,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(193);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case COMMENT:
						{
						setState(189);
						comment();
						setState(190);
						nl();
						}
						break;
					case IF:
					case REPEAT:
					case PREPARE:
					case SET:
					case INSERT:
					case REMOVE:
					case SPLIT:
					case MERGE:
					case CALL:
						{
						setState(192);
						statement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(197);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,12,_ctx);
			}
			setState(198);
			closer();
			setState(199);
			match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CommentContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(simpleParser.COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitComment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentContext comment() throws RecognitionException {
		CommentContext _localctx = new CommentContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_comment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(201);
			match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NlContext extends ParserRuleContext {
		public TerminalNode NEWLINE() { return getToken(simpleParser.NEWLINE, 0); }
		public NlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterNl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitNl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitNl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NlContext nl() throws RecognitionException {
		NlContext _localctx = new NlContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_nl);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(203);
			match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StatementContext extends ParserRuleContext {
		public InstructionContext instruction() {
			return getRuleContext(InstructionContext.class,0);
		}
		public NlContext nl() {
			return getRuleContext(NlContext.class,0);
		}
		public Flow_controlContext flow_control() {
			return getRuleContext(Flow_controlContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_statement);
		try {
			setState(210);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PREPARE:
			case SET:
			case INSERT:
			case REMOVE:
			case SPLIT:
			case MERGE:
			case CALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(205);
				instruction();
				setState(206);
				match(T__3);
				setState(207);
				nl();
				}
				break;
			case IF:
			case REPEAT:
				enterOuterAlt(_localctx, 2);
				{
				setState(209);
				flow_control();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CloserContext extends ParserRuleContext {
		public NlContext nl() {
			return getRuleContext(NlContext.class,0);
		}
		public InstructionContext instruction() {
			return getRuleContext(InstructionContext.class,0);
		}
		public ReturnContext return_() {
			return getRuleContext(ReturnContext.class,0);
		}
		public Flow_controlContext flow_control() {
			return getRuleContext(Flow_controlContext.class,0);
		}
		public CloserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_closer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterCloser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitCloser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitCloser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CloserContext closer() throws RecognitionException {
		CloserContext _localctx = new CloserContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_closer);
		try {
			setState(220);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RETURN:
			case PREPARE:
			case SET:
			case INSERT:
			case REMOVE:
			case SPLIT:
			case MERGE:
			case CALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(214);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PREPARE:
				case SET:
				case INSERT:
				case REMOVE:
				case SPLIT:
				case MERGE:
				case CALL:
					{
					setState(212);
					instruction();
					}
					break;
				case RETURN:
					{
					setState(213);
					return_();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(216);
				match(T__4);
				setState(217);
				nl();
				}
				break;
			case IF:
			case REPEAT:
				enterOuterAlt(_localctx, 2);
				{
				setState(219);
				flow_control();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Flow_controlContext extends ParserRuleContext {
		public BranchContext branch() {
			return getRuleContext(BranchContext.class,0);
		}
		public LoopContext loop() {
			return getRuleContext(LoopContext.class,0);
		}
		public Flow_controlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flow_control; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterFlow_control(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitFlow_control(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitFlow_control(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Flow_controlContext flow_control() throws RecognitionException {
		Flow_controlContext _localctx = new Flow_controlContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_flow_control);
		try {
			setState(224);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IF:
				enterOuterAlt(_localctx, 1);
				{
				setState(222);
				branch();
				}
				break;
			case REPEAT:
				enterOuterAlt(_localctx, 2);
				{
				setState(223);
				loop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BranchContext extends ParserRuleContext {
		public If_condContext if_cond() {
			return getRuleContext(If_condContext.class,0);
		}
		public List<Elif_condContext> elif_cond() {
			return getRuleContexts(Elif_condContext.class);
		}
		public Elif_condContext elif_cond(int i) {
			return getRuleContext(Elif_condContext.class,i);
		}
		public Else_condContext else_cond() {
			return getRuleContext(Else_condContext.class,0);
		}
		public BranchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_branch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterBranch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitBranch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitBranch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BranchContext branch() throws RecognitionException {
		BranchContext _localctx = new BranchContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_branch);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(226);
			if_cond();
			setState(230);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSEIF) {
				{
				{
				setState(227);
				elif_cond();
				}
				}
				setState(232);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(234);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(233);
				else_cond();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class If_condContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(simpleParser.IF, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(simpleParser.THEN, 0); }
		public NlContext nl() {
			return getRuleContext(NlContext.class,0);
		}
		public Scope_blockContext scope_block() {
			return getRuleContext(Scope_blockContext.class,0);
		}
		public If_condContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_cond; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterIf_cond(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitIf_cond(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitIf_cond(this);
			else return visitor.visitChildren(this);
		}
	}

	public final If_condContext if_cond() throws RecognitionException {
		If_condContext _localctx = new If_condContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_if_cond);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(236);
			match(IF);
			setState(237);
			condition();
			setState(238);
			match(THEN);
			setState(239);
			match(T__1);
			setState(240);
			nl();
			setState(241);
			scope_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Elif_condContext extends ParserRuleContext {
		public TerminalNode ELSEIF() { return getToken(simpleParser.ELSEIF, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(simpleParser.THEN, 0); }
		public NlContext nl() {
			return getRuleContext(NlContext.class,0);
		}
		public Scope_blockContext scope_block() {
			return getRuleContext(Scope_blockContext.class,0);
		}
		public Elif_condContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elif_cond; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterElif_cond(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitElif_cond(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitElif_cond(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Elif_condContext elif_cond() throws RecognitionException {
		Elif_condContext _localctx = new Elif_condContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_elif_cond);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(243);
			match(ELSEIF);
			setState(244);
			condition();
			setState(245);
			match(THEN);
			setState(246);
			match(T__1);
			setState(247);
			nl();
			setState(248);
			scope_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Else_condContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(simpleParser.ELSE, 0); }
		public NlContext nl() {
			return getRuleContext(NlContext.class,0);
		}
		public Scope_blockContext scope_block() {
			return getRuleContext(Scope_blockContext.class,0);
		}
		public Else_condContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_else_cond; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterElse_cond(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitElse_cond(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitElse_cond(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Else_condContext else_cond() throws RecognitionException {
		Else_condContext _localctx = new Else_condContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_else_cond);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(250);
			match(ELSE);
			setState(251);
			match(T__1);
			setState(252);
			nl();
			setState(253);
			scope_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LoopContext extends ParserRuleContext {
		public TerminalNode REPEAT() { return getToken(simpleParser.REPEAT, 0); }
		public Loop_defContext loop_def() {
			return getRuleContext(Loop_defContext.class,0);
		}
		public NlContext nl() {
			return getRuleContext(NlContext.class,0);
		}
		public Scope_blockContext scope_block() {
			return getRuleContext(Scope_blockContext.class,0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterLoop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitLoop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitLoop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoopContext loop() throws RecognitionException {
		LoopContext _localctx = new LoopContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_loop);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(255);
			match(REPEAT);
			setState(256);
			loop_def();
			setState(257);
			match(T__1);
			setState(258);
			nl();
			setState(259);
			scope_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Loop_defContext extends ParserRuleContext {
		public Loop_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loop_def; }
	 
		public Loop_defContext() { }
		public void copyFrom(Loop_defContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CondLoopContext extends Loop_defContext {
		public TerminalNode WHILE() { return getToken(simpleParser.WHILE, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public CondLoopContext(Loop_defContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterCondLoop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitCondLoop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitCondLoop(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class QuantLoopContext extends Loop_defContext {
		public Direct_valueContext direct_value() {
			return getRuleContext(Direct_valueContext.class,0);
		}
		public TerminalNode TIMES() { return getToken(simpleParser.TIMES, 0); }
		public QuantLoopContext(Loop_defContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterQuantLoop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitQuantLoop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitQuantLoop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Loop_defContext loop_def() throws RecognitionException {
		Loop_defContext _localctx = new Loop_defContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_loop_def);
		try {
			setState(266);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHILE:
				_localctx = new CondLoopContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(261);
				match(WHILE);
				setState(262);
				condition();
				}
				break;
			case T__7:
			case T__8:
			case T__10:
			case T__12:
			case Text:
			case Boolean:
			case NAME:
			case NUM:
			case NULL:
				_localctx = new QuantLoopContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(263);
				direct_value();
				setState(264);
				match(TIMES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConditionContext extends ParserRuleContext {
		public Logic_opContext logic_op() {
			return getRuleContext(Logic_opContext.class,0);
		}
		public Compare_opContext compare_op() {
			return getRuleContext(Compare_opContext.class,0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConditionContext condition() throws RecognitionException {
		ConditionContext _localctx = new ConditionContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_condition);
		try {
			setState(270);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(268);
				logic_op();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(269);
				compare_op();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReturnContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(simpleParser.RETURN, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterReturn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitReturn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitReturn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReturnContext return_() throws RecognitionException {
		ReturnContext _localctx = new ReturnContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_return);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(272);
			match(RETURN);
			setState(273);
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InstructionContext extends ParserRuleContext {
		public Var_declContext var_decl() {
			return getRuleContext(Var_declContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_instruction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterInstruction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitInstruction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitInstruction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InstructionContext instruction() throws RecognitionException {
		InstructionContext _localctx = new InstructionContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_instruction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(277);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PREPARE:
				{
				setState(275);
				var_decl();
				}
				break;
			case SET:
			case INSERT:
			case REMOVE:
			case SPLIT:
			case MERGE:
			case CALL:
				{
				setState(276);
				expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Var_declContext extends ParserRuleContext {
		public Var_defContext var_def() {
			return getRuleContext(Var_defContext.class,0);
		}
		public Var_initContext var_init() {
			return getRuleContext(Var_initContext.class,0);
		}
		public Var_declContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_decl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterVar_decl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitVar_decl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitVar_decl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Var_declContext var_decl() throws RecognitionException {
		Var_declContext _localctx = new Var_declContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_var_decl);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(279);
			var_def();
			setState(281);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VALUED) {
				{
				setState(280);
				var_init();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Var_defContext extends ParserRuleContext {
		public TerminalNode PREPARE() { return getToken(simpleParser.PREPARE, 0); }
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public TerminalNode NAMED() { return getToken(simpleParser.NAMED, 0); }
		public TerminalNode NAME() { return getToken(simpleParser.NAME, 0); }
		public Var_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterVar_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitVar_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitVar_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Var_defContext var_def() throws RecognitionException {
		Var_defContext _localctx = new Var_defContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_var_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(283);
			match(PREPARE);
			setState(284);
			type();
			setState(285);
			match(NAMED);
			setState(286);
			match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Var_initContext extends ParserRuleContext {
		public TerminalNode VALUED() { return getToken(simpleParser.VALUED, 0); }
		public Direct_valueContext direct_value() {
			return getRuleContext(Direct_valueContext.class,0);
		}
		public ReservedContext reserved() {
			return getRuleContext(ReservedContext.class,0);
		}
		public Var_initContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_init; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterVar_init(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitVar_init(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitVar_init(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Var_initContext var_init() throws RecognitionException {
		Var_initContext _localctx = new Var_initContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_var_init);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(288);
			match(VALUED);
			setState(291);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__7:
			case T__8:
			case T__10:
			case T__12:
			case Text:
			case Boolean:
			case NAME:
			case NUM:
			case NULL:
				{
				setState(289);
				direct_value();
				}
				break;
			case T__0:
			case T__3:
			case T__4:
			case COUNTER:
			case SIZEOF:
			case RANDOM:
				{
				setState(290);
				reserved();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExprContext extends ParserRuleContext {
		public AssignmentContext assignment() {
			return getRuleContext(AssignmentContext.class,0);
		}
		public Fun_callContext fun_call() {
			return getRuleContext(Fun_callContext.class,0);
		}
		public List_opContext list_op() {
			return getRuleContext(List_opContext.class,0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprContext expr() throws RecognitionException {
		ExprContext _localctx = new ExprContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_expr);
		try {
			setState(296);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(293);
				assignment();
				}
				break;
			case CALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(294);
				fun_call();
				}
				break;
			case INSERT:
			case REMOVE:
			case SPLIT:
			case MERGE:
				enterOuterAlt(_localctx, 3);
				{
				setState(295);
				list_op();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AssignmentContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(simpleParser.SET, 0); }
		public TerminalNode TO() { return getToken(simpleParser.TO, 0); }
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public TerminalNode OUTP() { return getToken(simpleParser.OUTP, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public ReservedContext reserved() {
			return getRuleContext(ReservedContext.class,0);
		}
		public TerminalNode INP() { return getToken(simpleParser.INP, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterAssignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitAssignment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitAssignment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentContext assignment() throws RecognitionException {
		AssignmentContext _localctx = new AssignmentContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_assignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(298);
			match(SET);
			setState(301);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NAME:
				{
				setState(299);
				variable();
				}
				break;
			case OUTP:
				{
				setState(300);
				match(OUTP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(303);
			match(TO);
			setState(307);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__5:
			case T__7:
			case T__8:
			case T__10:
			case T__12:
			case Text:
			case Boolean:
			case NAME:
			case NUM:
			case NULL:
				{
				setState(304);
				value();
				}
				break;
			case T__3:
			case T__4:
			case COUNTER:
			case SIZEOF:
			case RANDOM:
				{
				setState(305);
				reserved();
				}
				break;
			case INP:
				{
				setState(306);
				match(INP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class List_opContext extends ParserRuleContext {
		public List_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_op; }
	 
		public List_opContext() { }
		public void copyFrom(List_opContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class List2TextContext extends List_opContext {
		public TerminalNode MERGE() { return getToken(simpleParser.MERGE, 0); }
		public List<VariableContext> variable() {
			return getRuleContexts(VariableContext.class);
		}
		public VariableContext variable(int i) {
			return getRuleContext(VariableContext.class,i);
		}
		public TerminalNode IN() { return getToken(simpleParser.IN, 0); }
		public List2TextContext(List_opContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterList2Text(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitList2Text(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitList2Text(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ListRemovalContext extends List_opContext {
		public TerminalNode REMOVE() { return getToken(simpleParser.REMOVE, 0); }
		public Struct_accessContext struct_access() {
			return getRuleContext(Struct_accessContext.class,0);
		}
		public ListRemovalContext(List_opContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterListRemoval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitListRemoval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitListRemoval(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class Text2ListContext extends List_opContext {
		public TerminalNode SPLIT() { return getToken(simpleParser.SPLIT, 0); }
		public List<VariableContext> variable() {
			return getRuleContexts(VariableContext.class);
		}
		public VariableContext variable(int i) {
			return getRuleContext(VariableContext.class,i);
		}
		public TerminalNode IN() { return getToken(simpleParser.IN, 0); }
		public Text2ListContext(List_opContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterText2List(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitText2List(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitText2List(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ListInsertionContext extends List_opContext {
		public TerminalNode INSERT() { return getToken(simpleParser.INSERT, 0); }
		public Direct_valueContext direct_value() {
			return getRuleContext(Direct_valueContext.class,0);
		}
		public TerminalNode IN() { return getToken(simpleParser.IN, 0); }
		public Struct_accessContext struct_access() {
			return getRuleContext(Struct_accessContext.class,0);
		}
		public ListInsertionContext(List_opContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterListInsertion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitListInsertion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitListInsertion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final List_opContext list_op() throws RecognitionException {
		List_opContext _localctx = new List_opContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_list_op);
		try {
			setState(326);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INSERT:
				_localctx = new ListInsertionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(309);
				match(INSERT);
				setState(310);
				direct_value();
				setState(311);
				match(IN);
				setState(312);
				struct_access();
				}
				break;
			case REMOVE:
				_localctx = new ListRemovalContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(314);
				match(REMOVE);
				setState(315);
				struct_access();
				}
				break;
			case SPLIT:
				_localctx = new Text2ListContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(316);
				match(SPLIT);
				setState(317);
				variable();
				setState(318);
				match(IN);
				setState(319);
				variable();
				}
				break;
			case MERGE:
				_localctx = new List2TextContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(321);
				match(MERGE);
				setState(322);
				variable();
				setState(323);
				match(IN);
				setState(324);
				variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValueContext extends ParserRuleContext {
		public Direct_valueContext direct_value() {
			return getRuleContext(Direct_valueContext.class,0);
		}
		public OperationContext operation() {
			return getRuleContext(OperationContext.class,0);
		}
		public Fun_callContext fun_call() {
			return getRuleContext(Fun_callContext.class,0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValueContext value() throws RecognitionException {
		ValueContext _localctx = new ValueContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_value);
		try {
			setState(334);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(328);
				direct_value();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(329);
				operation();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(330);
				match(T__5);
				setState(331);
				fun_call();
				setState(332);
				match(T__6);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Direct_valueContext extends ParserRuleContext {
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public Direct_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_direct_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterDirect_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitDirect_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitDirect_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Direct_valueContext direct_value() throws RecognitionException {
		Direct_valueContext _localctx = new Direct_valueContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_direct_value);
		try {
			setState(338);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(336);
				variable();
				}
				break;
			case T__7:
			case T__8:
			case T__10:
			case T__12:
			case Text:
			case Boolean:
			case NUM:
			case NULL:
				enterOuterAlt(_localctx, 2);
				{
				setState(337);
				literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VariableContext extends ParserRuleContext {
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public Struct_accessContext struct_access() {
			return getRuleContext(Struct_accessContext.class,0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableContext variable() throws RecognitionException {
		VariableContext _localctx = new VariableContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_variable);
		try {
			setState(342);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(340);
				var_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(341);
				struct_access();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Var_nameContext extends ParserRuleContext {
		public TerminalNode NAME() { return getToken(simpleParser.NAME, 0); }
		public Var_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterVar_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitVar_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitVar_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Var_nameContext var_name() throws RecognitionException {
		Var_nameContext _localctx = new Var_nameContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_var_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(344);
			match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Struct_accessContext extends ParserRuleContext {
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode POSITION() { return getToken(simpleParser.POSITION, 0); }
		public AccessContext access() {
			return getRuleContext(AccessContext.class,0);
		}
		public Struct_accessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_struct_access; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterStruct_access(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitStruct_access(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitStruct_access(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Struct_accessContext struct_access() throws RecognitionException {
		Struct_accessContext _localctx = new Struct_accessContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_struct_access);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(346);
			var_name();
			setState(347);
			match(POSITION);
			setState(348);
			access();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AccessContext extends ParserRuleContext {
		public TerminalNode NUM() { return getToken(simpleParser.NUM, 0); }
		public TerminalNode ATFIELD() { return getToken(simpleParser.ATFIELD, 0); }
		public TerminalNode NAME() { return getToken(simpleParser.NAME, 0); }
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public ReservedContext reserved() {
			return getRuleContext(ReservedContext.class,0);
		}
		public AccessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_access; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterAccess(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitAccess(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitAccess(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AccessContext access() throws RecognitionException {
		AccessContext _localctx = new AccessContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_access);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(355);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUM:
				{
				setState(350);
				match(NUM);
				}
				break;
			case ATFIELD:
				{
				setState(351);
				match(ATFIELD);
				setState(352);
				match(NAME);
				}
				break;
			case NAME:
				{
				setState(353);
				var_name();
				}
				break;
			case T__0:
			case T__2:
			case T__3:
			case T__4:
			case T__6:
			case TIMES:
			case TO:
			case IN:
			case COUNTER:
			case SIZEOF:
			case RANDOM:
			case ADD:
			case SUB:
			case MULT:
			case DIV:
			case MODULUS:
			case AND:
			case OR:
			case GT:
			case LT:
			case EQ:
				{
				setState(354);
				reserved();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReservedContext extends ParserRuleContext {
		public TerminalNode COUNTER() { return getToken(simpleParser.COUNTER, 0); }
		public TerminalNode SIZEOF() { return getToken(simpleParser.SIZEOF, 0); }
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode RANDOM() { return getToken(simpleParser.RANDOM, 0); }
		public ReservedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reserved; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterReserved(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitReserved(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitReserved(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReservedContext reserved() throws RecognitionException {
		ReservedContext _localctx = new ReservedContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_reserved);
		try {
			setState(362);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__2:
			case T__3:
			case T__4:
			case T__6:
			case TIMES:
			case TO:
			case IN:
			case ADD:
			case SUB:
			case MULT:
			case DIV:
			case MODULUS:
			case AND:
			case OR:
			case GT:
			case LT:
			case EQ:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case COUNTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(358);
				match(COUNTER);
				}
				break;
			case SIZEOF:
				enterOuterAlt(_localctx, 3);
				{
				setState(359);
				match(SIZEOF);
				setState(360);
				var_name();
				}
				break;
			case RANDOM:
				enterOuterAlt(_localctx, 4);
				{
				setState(361);
				match(RANDOM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LiteralContext extends ParserRuleContext {
		public TerminalNode Text() { return getToken(simpleParser.Text, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public TerminalNode Boolean() { return getToken(simpleParser.Boolean, 0); }
		public TerminalNode NULL() { return getToken(simpleParser.NULL, 0); }
		public Struct_litContext struct_lit() {
			return getRuleContext(Struct_litContext.class,0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LiteralContext literal() throws RecognitionException {
		LiteralContext _localctx = new LiteralContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_literal);
		try {
			setState(369);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Text:
				enterOuterAlt(_localctx, 1);
				{
				setState(364);
				match(Text);
				}
				break;
			case T__7:
			case NUM:
				enterOuterAlt(_localctx, 2);
				{
				setState(365);
				number();
				}
				break;
			case Boolean:
				enterOuterAlt(_localctx, 3);
				{
				setState(366);
				match(Boolean);
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 4);
				{
				setState(367);
				match(NULL);
				}
				break;
			case T__8:
			case T__10:
			case T__12:
				enterOuterAlt(_localctx, 5);
				{
				setState(368);
				struct_lit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumberContext extends ParserRuleContext {
		public List<TerminalNode> NUM() { return getTokens(simpleParser.NUM); }
		public TerminalNode NUM(int i) {
			return getToken(simpleParser.NUM, i);
		}
		public NumberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterNumber(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitNumber(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitNumber(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumberContext number() throws RecognitionException {
		NumberContext _localctx = new NumberContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(372);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__7) {
				{
				setState(371);
				match(T__7);
				}
			}

			setState(374);
			match(NUM);
			setState(377);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
			case 1:
				{
				setState(375);
				match(T__0);
				setState(376);
				match(NUM);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Struct_litContext extends ParserRuleContext {
		public SequenceContext sequence() {
			return getRuleContext(SequenceContext.class,0);
		}
		public ListContext list() {
			return getRuleContext(ListContext.class,0);
		}
		public KitContext kit() {
			return getRuleContext(KitContext.class,0);
		}
		public Struct_litContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_struct_lit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterStruct_lit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitStruct_lit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitStruct_lit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Struct_litContext struct_lit() throws RecognitionException {
		Struct_litContext _localctx = new Struct_litContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_struct_lit);
		try {
			setState(382);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__8:
				enterOuterAlt(_localctx, 1);
				{
				setState(379);
				sequence();
				}
				break;
			case T__10:
				enterOuterAlt(_localctx, 2);
				{
				setState(380);
				list();
				}
				break;
			case T__12:
				enterOuterAlt(_localctx, 3);
				{
				setState(381);
				kit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SequenceContext extends ParserRuleContext {
		public List<LiteralContext> literal() {
			return getRuleContexts(LiteralContext.class);
		}
		public LiteralContext literal(int i) {
			return getRuleContext(LiteralContext.class,i);
		}
		public SequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterSequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitSequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitSequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceContext sequence() throws RecognitionException {
		SequenceContext _localctx = new SequenceContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(384);
			match(T__8);
			setState(385);
			literal();
			setState(390);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==T__2) {
				{
				{
				setState(386);
				match(T__2);
				setState(387);
				literal();
				}
				}
				setState(392);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(393);
			match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ListContext extends ParserRuleContext {
		public List<LiteralContext> literal() {
			return getRuleContexts(LiteralContext.class);
		}
		public LiteralContext literal(int i) {
			return getRuleContext(LiteralContext.class,i);
		}
		public ListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ListContext list() throws RecognitionException {
		ListContext _localctx = new ListContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(395);
			match(T__10);
			setState(404);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
			case 1:
				{
				setState(396);
				literal();
				setState(401);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__11) {
					{
					{
					setState(397);
					match(T__11);
					setState(398);
					literal();
					}
					}
					setState(403);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(406);
			match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class KitContext extends ParserRuleContext {
		public List<LiteralContext> literal() {
			return getRuleContexts(LiteralContext.class);
		}
		public LiteralContext literal(int i) {
			return getRuleContext(LiteralContext.class,i);
		}
		public KitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_kit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterKit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitKit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitKit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KitContext kit() throws RecognitionException {
		KitContext _localctx = new KitContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_kit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(408);
			match(T__12);
			setState(409);
			literal();
			setState(414);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==T__2) {
				{
				{
				setState(410);
				match(T__2);
				setState(411);
				literal();
				}
				}
				setState(416);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(417);
			match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OperationContext extends ParserRuleContext {
		public Arith_opContext arith_op() {
			return getRuleContext(Arith_opContext.class,0);
		}
		public Logic_opContext logic_op() {
			return getRuleContext(Logic_opContext.class,0);
		}
		public Compare_opContext compare_op() {
			return getRuleContext(Compare_opContext.class,0);
		}
		public OperationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitOperation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitOperation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperationContext operation() throws RecognitionException {
		OperationContext _localctx = new OperationContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_operation);
		try {
			setState(422);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(419);
				arith_op();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(420);
				logic_op();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(421);
				compare_op();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Arith_opContext extends ParserRuleContext {
		public Token opr;
		public List<Ar_oprndContext> ar_oprnd() {
			return getRuleContexts(Ar_oprndContext.class);
		}
		public Ar_oprndContext ar_oprnd(int i) {
			return getRuleContext(Ar_oprndContext.class,i);
		}
		public TerminalNode ADD() { return getToken(simpleParser.ADD, 0); }
		public TerminalNode SUB() { return getToken(simpleParser.SUB, 0); }
		public TerminalNode MULT() { return getToken(simpleParser.MULT, 0); }
		public TerminalNode DIV() { return getToken(simpleParser.DIV, 0); }
		public TerminalNode MODULUS() { return getToken(simpleParser.MODULUS, 0); }
		public Arith_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arith_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterArith_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitArith_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitArith_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Arith_opContext arith_op() throws RecognitionException {
		Arith_opContext _localctx = new Arith_opContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_arith_op);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(424);
			match(T__5);
			setState(425);
			ar_oprnd();
			setState(426);
			((Arith_opContext)_localctx).opr = _input.LT(1);
			_la = _input.LA(1);
			if ( !(((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & 31L) != 0)) ) {
				((Arith_opContext)_localctx).opr = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(427);
			ar_oprnd();
			setState(428);
			match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Ar_oprndContext extends ParserRuleContext {
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public ReservedContext reserved() {
			return getRuleContext(ReservedContext.class,0);
		}
		public Arith_opContext arith_op() {
			return getRuleContext(Arith_opContext.class,0);
		}
		public Ar_oprndContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ar_oprnd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterAr_oprnd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitAr_oprnd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitAr_oprnd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ar_oprndContext ar_oprnd() throws RecognitionException {
		Ar_oprndContext _localctx = new Ar_oprndContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_ar_oprnd);
		try {
			setState(434);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(430);
				variable();
				}
				break;
			case T__7:
			case NUM:
				enterOuterAlt(_localctx, 2);
				{
				setState(431);
				number();
				}
				break;
			case T__6:
			case COUNTER:
			case SIZEOF:
			case RANDOM:
			case ADD:
			case SUB:
			case MULT:
			case DIV:
			case MODULUS:
			case GT:
			case LT:
				enterOuterAlt(_localctx, 3);
				{
				setState(432);
				reserved();
				}
				break;
			case T__5:
				enterOuterAlt(_localctx, 4);
				{
				setState(433);
				arith_op();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Logic_opContext extends ParserRuleContext {
		public List<Log_oprndContext> log_oprnd() {
			return getRuleContexts(Log_oprndContext.class);
		}
		public Log_oprndContext log_oprnd(int i) {
			return getRuleContext(Log_oprndContext.class,i);
		}
		public TerminalNode AND() { return getToken(simpleParser.AND, 0); }
		public TerminalNode OR() { return getToken(simpleParser.OR, 0); }
		public TerminalNode NOT() { return getToken(simpleParser.NOT, 0); }
		public Logic_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logic_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterLogic_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitLogic_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitLogic_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Logic_opContext logic_op() throws RecognitionException {
		Logic_opContext _localctx = new Logic_opContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_logic_op);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(436);
			match(T__5);
			setState(447);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				setState(437);
				log_oprnd();
				setState(438);
				match(AND);
				setState(439);
				log_oprnd();
				}
				break;
			case 2:
				{
				setState(441);
				log_oprnd();
				setState(442);
				match(OR);
				setState(443);
				log_oprnd();
				}
				break;
			case 3:
				{
				setState(445);
				match(NOT);
				setState(446);
				log_oprnd();
				}
				break;
			}
			setState(449);
			match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Log_oprndContext extends ParserRuleContext {
		public TerminalNode Boolean() { return getToken(simpleParser.Boolean, 0); }
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public Compare_opContext compare_op() {
			return getRuleContext(Compare_opContext.class,0);
		}
		public Logic_opContext logic_op() {
			return getRuleContext(Logic_opContext.class,0);
		}
		public Log_oprndContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_log_oprnd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterLog_oprnd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitLog_oprnd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitLog_oprnd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Log_oprndContext log_oprnd() throws RecognitionException {
		Log_oprndContext _localctx = new Log_oprndContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_log_oprnd);
		try {
			setState(455);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(451);
				match(Boolean);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(452);
				variable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(453);
				compare_op();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(454);
				logic_op();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Compare_opContext extends ParserRuleContext {
		public List<Ar_oprndContext> ar_oprnd() {
			return getRuleContexts(Ar_oprndContext.class);
		}
		public Ar_oprndContext ar_oprnd(int i) {
			return getRuleContext(Ar_oprndContext.class,i);
		}
		public TerminalNode GT() { return getToken(simpleParser.GT, 0); }
		public TerminalNode LT() { return getToken(simpleParser.LT, 0); }
		public List<Comp_oprndContext> comp_oprnd() {
			return getRuleContexts(Comp_oprndContext.class);
		}
		public Comp_oprndContext comp_oprnd(int i) {
			return getRuleContext(Comp_oprndContext.class,i);
		}
		public TerminalNode EQ() { return getToken(simpleParser.EQ, 0); }
		public Compare_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compare_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterCompare_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitCompare_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitCompare_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compare_opContext compare_op() throws RecognitionException {
		Compare_opContext _localctx = new Compare_opContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_compare_op);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(457);
			match(T__5);
			setState(470);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
			case 1:
				{
				setState(458);
				ar_oprnd();
				setState(459);
				match(GT);
				setState(460);
				ar_oprnd();
				}
				break;
			case 2:
				{
				setState(462);
				ar_oprnd();
				setState(463);
				match(LT);
				setState(464);
				ar_oprnd();
				}
				break;
			case 3:
				{
				setState(466);
				comp_oprnd();
				setState(467);
				match(EQ);
				setState(468);
				comp_oprnd();
				}
				break;
			}
			setState(472);
			match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Comp_oprndContext extends ParserRuleContext {
		public Direct_valueContext direct_value() {
			return getRuleContext(Direct_valueContext.class,0);
		}
		public ReservedContext reserved() {
			return getRuleContext(ReservedContext.class,0);
		}
		public Arith_opContext arith_op() {
			return getRuleContext(Arith_opContext.class,0);
		}
		public Comp_oprndContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comp_oprnd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterComp_oprnd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitComp_oprnd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitComp_oprnd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comp_oprndContext comp_oprnd() throws RecognitionException {
		Comp_oprndContext _localctx = new Comp_oprndContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_comp_oprnd);
		try {
			setState(477);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__7:
			case T__8:
			case T__10:
			case T__12:
			case Text:
			case Boolean:
			case NAME:
			case NUM:
			case NULL:
				enterOuterAlt(_localctx, 1);
				{
				setState(474);
				direct_value();
				}
				break;
			case T__6:
			case COUNTER:
			case SIZEOF:
			case RANDOM:
			case EQ:
				enterOuterAlt(_localctx, 2);
				{
				setState(475);
				reserved();
				}
				break;
			case T__5:
				enterOuterAlt(_localctx, 3);
				{
				setState(476);
				arith_op();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Fun_callContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(simpleParser.CALL, 0); }
		public Fun_nameContext fun_name() {
			return getRuleContext(Fun_nameContext.class,0);
		}
		public TerminalNode ARGUMENTS() { return getToken(simpleParser.ARGUMENTS, 0); }
		public List<Direct_valueContext> direct_value() {
			return getRuleContexts(Direct_valueContext.class);
		}
		public Direct_valueContext direct_value(int i) {
			return getRuleContext(Direct_valueContext.class,i);
		}
		public Fun_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fun_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterFun_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitFun_call(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitFun_call(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fun_callContext fun_call() throws RecognitionException {
		Fun_callContext _localctx = new Fun_callContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_fun_call);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(479);
			match(CALL);
			setState(480);
			fun_name();
			setState(490);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ARGUMENTS) {
				{
				setState(481);
				match(ARGUMENTS);
				setState(482);
				direct_value();
				setState(487);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__2) {
					{
					{
					setState(483);
					match(T__2);
					setState(484);
					direct_value();
					}
					}
					setState(489);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Fun_nameContext extends ParserRuleContext {
		public TerminalNode NAME() { return getToken(simpleParser.NAME, 0); }
		public Fun_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fun_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterFun_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitFun_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitFun_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fun_nameContext fun_name() throws RecognitionException {
		Fun_nameContext _localctx = new Fun_nameContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_fun_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(492);
			match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TypeContext extends ParserRuleContext {
		public TerminalNode NUMBER() { return getToken(simpleParser.NUMBER, 0); }
		public TerminalNode STRING() { return getToken(simpleParser.STRING, 0); }
		public TerminalNode BOOL() { return getToken(simpleParser.BOOL, 0); }
		public Declared_typeContext declared_type() {
			return getRuleContext(Declared_typeContext.class,0);
		}
		public Struct_typeContext struct_type() {
			return getRuleContext(Struct_typeContext.class,0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeContext type() throws RecognitionException {
		TypeContext _localctx = new TypeContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_type);
		try {
			setState(502);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(494);
				match(NUMBER);
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(495);
				match(STRING);
				}
				break;
			case BOOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(496);
				match(BOOL);
				}
				break;
			case TYPENAME:
				enterOuterAlt(_localctx, 4);
				{
				setState(497);
				declared_type();
				}
				break;
			case T__5:
				enterOuterAlt(_localctx, 5);
				{
				setState(498);
				match(T__5);
				setState(499);
				struct_type();
				setState(500);
				match(T__6);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Declared_typeContext extends ParserRuleContext {
		public TerminalNode TYPENAME() { return getToken(simpleParser.TYPENAME, 0); }
		public Declared_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declared_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterDeclared_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitDeclared_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitDeclared_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declared_typeContext declared_type() throws RecognitionException {
		Declared_typeContext _localctx = new Declared_typeContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_declared_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(504);
			match(TYPENAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Struct_typeContext extends ParserRuleContext {
		public Seq_typeContext seq_type() {
			return getRuleContext(Seq_typeContext.class,0);
		}
		public List_typeContext list_type() {
			return getRuleContext(List_typeContext.class,0);
		}
		public Kit_typeContext kit_type() {
			return getRuleContext(Kit_typeContext.class,0);
		}
		public Struct_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_struct_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterStruct_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitStruct_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitStruct_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Struct_typeContext struct_type() throws RecognitionException {
		Struct_typeContext _localctx = new Struct_typeContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_struct_type);
		try {
			setState(509);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEQUENCE:
				enterOuterAlt(_localctx, 1);
				{
				setState(506);
				seq_type();
				}
				break;
			case LIST:
				enterOuterAlt(_localctx, 2);
				{
				setState(507);
				list_type();
				}
				break;
			case KIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(508);
				kit_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Seq_typeContext extends ParserRuleContext {
		public TerminalNode SEQUENCE() { return getToken(simpleParser.SEQUENCE, 0); }
		public TerminalNode NUM() { return getToken(simpleParser.NUM, 0); }
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public Seq_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seq_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterSeq_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitSeq_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitSeq_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Seq_typeContext seq_type() throws RecognitionException {
		Seq_typeContext _localctx = new Seq_typeContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_seq_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(511);
			match(SEQUENCE);
			setState(512);
			match(NUM);
			setState(513);
			match(T__14);
			setState(514);
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class List_typeContext extends ParserRuleContext {
		public TerminalNode LIST() { return getToken(simpleParser.LIST, 0); }
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public List_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterList_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitList_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitList_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final List_typeContext list_type() throws RecognitionException {
		List_typeContext _localctx = new List_typeContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_list_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(516);
			match(LIST);
			setState(517);
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Kit_typeContext extends ParserRuleContext {
		public TerminalNode KIT() { return getToken(simpleParser.KIT, 0); }
		public List<ParamContext> param() {
			return getRuleContexts(ParamContext.class);
		}
		public ParamContext param(int i) {
			return getRuleContext(ParamContext.class,i);
		}
		public Kit_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_kit_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterKit_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitKit_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitKit_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Kit_typeContext kit_type() throws RecognitionException {
		Kit_typeContext _localctx = new Kit_typeContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_kit_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(519);
			match(KIT);
			setState(520);
			param();
			setState(523); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(521);
				match(T__2);
				setState(522);
				param();
				}
				}
				setState(525); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==T__2 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParamContext extends ParserRuleContext {
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public TerminalNode NAME() { return getToken(simpleParser.NAME, 0); }
		public ParamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).enterParam(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof simpleListener ) ((simpleListener)listener).exitParam(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof simpleVisitor ) return ((simpleVisitor<? extends T>)visitor).visitParam(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParamContext param() throws RecognitionException {
		ParamContext _localctx = new ParamContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_param);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(527);
			type();
			setState(528);
			match(T__14);
			setState(529);
			match(NAME);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static final String _serializedATN =
		"\u0004\u0001O\u0214\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001\u0002"+
		"\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004\u0002"+
		"\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007\u0002"+
		"\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b\u0002"+
		"\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007\u000f"+
		"\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007\u0012"+
		"\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007\u0015"+
		"\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007\u0018"+
		"\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007\u001b"+
		"\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007\u001e"+
		"\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007\"\u0002"+
		"#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007\'\u0002"+
		"(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007,\u0002"+
		"-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u00071\u0002"+
		"2\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u00076\u0002"+
		"7\u00077\u0001\u0000\u0001\u0000\u0003\u0000s\b\u0000\u0001\u0000\u0004"+
		"\u0000v\b\u0000\u000b\u0000\f\u0000w\u0004\u0000z\b\u0000\u000b\u0000"+
		"\f\u0000{\u0001\u0000\u0001\u0000\u0001\u0001\u0001\u0001\u0003\u0001"+
		"\u0082\b\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0003\u0001\u0087\b"+
		"\u0001\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001"+
		"\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001"+
		"\u0004\u0001\u0004\u0005\u0004\u009c\b\u0004\n\u0004\f\u0004\u009f\t\u0004"+
		"\u0003\u0004\u00a1\b\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0005\u0004\u00a7\b\u0004\n\u0004\f\u0004\u00aa\t\u0004\u0003\u0004\u00ac"+
		"\b\u0004\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0005"+
		"\u0005\u00b3\b\u0005\n\u0005\f\u0005\u00b6\t\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0005\u0006\u00c2\b\u0006\n\u0006\f\u0006\u00c5"+
		"\t\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0007\u0001\u0007\u0001"+
		"\b\u0001\b\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0003\t\u00d3\b\t\u0001"+
		"\n\u0001\n\u0003\n\u00d7\b\n\u0001\n\u0001\n\u0001\n\u0001\n\u0003\n\u00dd"+
		"\b\n\u0001\u000b\u0001\u000b\u0003\u000b\u00e1\b\u000b\u0001\f\u0001\f"+
		"\u0005\f\u00e5\b\f\n\f\f\f\u00e8\t\f\u0001\f\u0003\f\u00eb\b\f\u0001\r"+
		"\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\u000e\u0001\u000e"+
		"\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000f"+
		"\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u0010\u0001\u0010"+
		"\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0011\u0001\u0011"+
		"\u0001\u0011\u0001\u0011\u0001\u0011\u0003\u0011\u010b\b\u0011\u0001\u0012"+
		"\u0001\u0012\u0003\u0012\u010f\b\u0012\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0014\u0001\u0014\u0003\u0014\u0116\b\u0014\u0001\u0015\u0001\u0015"+
		"\u0003\u0015\u011a\b\u0015\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016"+
		"\u0001\u0016\u0001\u0017\u0001\u0017\u0001\u0017\u0003\u0017\u0124\b\u0017"+
		"\u0001\u0018\u0001\u0018\u0001\u0018\u0003\u0018\u0129\b\u0018\u0001\u0019"+
		"\u0001\u0019\u0001\u0019\u0003\u0019\u012e\b\u0019\u0001\u0019\u0001\u0019"+
		"\u0001\u0019\u0001\u0019\u0003\u0019\u0134\b\u0019\u0001\u001a\u0001\u001a"+
		"\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a"+
		"\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a"+
		"\u0001\u001a\u0001\u001a\u0001\u001a\u0003\u001a\u0147\b\u001a\u0001\u001b"+
		"\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0003\u001b"+
		"\u014f\b\u001b\u0001\u001c\u0001\u001c\u0003\u001c\u0153\b\u001c\u0001"+
		"\u001d\u0001\u001d\u0003\u001d\u0157\b\u001d\u0001\u001e\u0001\u001e\u0001"+
		"\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001 \u0001 \u0001 \u0001"+
		" \u0001 \u0003 \u0164\b \u0001!\u0001!\u0001!\u0001!\u0001!\u0003!\u016b"+
		"\b!\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0003\"\u0172\b\"\u0001#\u0003"+
		"#\u0175\b#\u0001#\u0001#\u0001#\u0003#\u017a\b#\u0001$\u0001$\u0001$\u0003"+
		"$\u017f\b$\u0001%\u0001%\u0001%\u0001%\u0005%\u0185\b%\n%\f%\u0188\t%"+
		"\u0001%\u0001%\u0001&\u0001&\u0001&\u0001&\u0005&\u0190\b&\n&\f&\u0193"+
		"\t&\u0003&\u0195\b&\u0001&\u0001&\u0001\'\u0001\'\u0001\'\u0001\'\u0005"+
		"\'\u019d\b\'\n\'\f\'\u01a0\t\'\u0001\'\u0001\'\u0001(\u0001(\u0001(\u0003"+
		"(\u01a7\b(\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001*\u0001*\u0001"+
		"*\u0001*\u0003*\u01b3\b*\u0001+\u0001+\u0001+\u0001+\u0001+\u0001+\u0001"+
		"+\u0001+\u0001+\u0001+\u0001+\u0003+\u01c0\b+\u0001+\u0001+\u0001,\u0001"+
		",\u0001,\u0001,\u0003,\u01c8\b,\u0001-\u0001-\u0001-\u0001-\u0001-\u0001"+
		"-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0003-\u01d7\b-\u0001"+
		"-\u0001-\u0001.\u0001.\u0001.\u0003.\u01de\b.\u0001/\u0001/\u0001/\u0001"+
		"/\u0001/\u0001/\u0005/\u01e6\b/\n/\f/\u01e9\t/\u0003/\u01eb\b/\u00010"+
		"\u00010\u00011\u00011\u00011\u00011\u00011\u00011\u00011\u00011\u0003"+
		"1\u01f7\b1\u00012\u00012\u00013\u00013\u00013\u00033\u01fe\b3\u00014\u0001"+
		"4\u00014\u00014\u00014\u00015\u00015\u00015\u00016\u00016\u00016\u0001"+
		"6\u00046\u020c\b6\u000b6\f6\u020d\u00017\u00017\u00017\u00017\u00017\u0000"+
		"\u00008\u0000\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018"+
		"\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjln\u0000\u0002"+
		"\u0002\u0000\u0013\u0013\u0018\u0018\u0001\u0000<@\u0229\u0000y\u0001"+
		"\u0000\u0000\u0000\u0002\u0086\u0001\u0000\u0000\u0000\u0004\u0088\u0001"+
		"\u0000\u0000\u0000\u0006\u008e\u0001\u0000\u0000\u0000\b\u0093\u0001\u0000"+
		"\u0000\u0000\n\u00ad\u0001\u0000\u0000\u0000\f\u00bc\u0001\u0000\u0000"+
		"\u0000\u000e\u00c9\u0001\u0000\u0000\u0000\u0010\u00cb\u0001\u0000\u0000"+
		"\u0000\u0012\u00d2\u0001\u0000\u0000\u0000\u0014\u00dc\u0001\u0000\u0000"+
		"\u0000\u0016\u00e0\u0001\u0000\u0000\u0000\u0018\u00e2\u0001\u0000\u0000"+
		"\u0000\u001a\u00ec\u0001\u0000\u0000\u0000\u001c\u00f3\u0001\u0000\u0000"+
		"\u0000\u001e\u00fa\u0001\u0000\u0000\u0000 \u00ff\u0001\u0000\u0000\u0000"+
		"\"\u010a\u0001\u0000\u0000\u0000$\u010e\u0001\u0000\u0000\u0000&\u0110"+
		"\u0001\u0000\u0000\u0000(\u0115\u0001\u0000\u0000\u0000*\u0117\u0001\u0000"+
		"\u0000\u0000,\u011b\u0001\u0000\u0000\u0000.\u0120\u0001\u0000\u0000\u0000"+
		"0\u0128\u0001\u0000\u0000\u00002\u012a\u0001\u0000\u0000\u00004\u0146"+
		"\u0001\u0000\u0000\u00006\u014e\u0001\u0000\u0000\u00008\u0152\u0001\u0000"+
		"\u0000\u0000:\u0156\u0001\u0000\u0000\u0000<\u0158\u0001\u0000\u0000\u0000"+
		">\u015a\u0001\u0000\u0000\u0000@\u0163\u0001\u0000\u0000\u0000B\u016a"+
		"\u0001\u0000\u0000\u0000D\u0171\u0001\u0000\u0000\u0000F\u0174\u0001\u0000"+
		"\u0000\u0000H\u017e\u0001\u0000\u0000\u0000J\u0180\u0001\u0000\u0000\u0000"+
		"L\u018b\u0001\u0000\u0000\u0000N\u0198\u0001\u0000\u0000\u0000P\u01a6"+
		"\u0001\u0000\u0000\u0000R\u01a8\u0001\u0000\u0000\u0000T\u01b2\u0001\u0000"+
		"\u0000\u0000V\u01b4\u0001\u0000\u0000\u0000X\u01c7\u0001\u0000\u0000\u0000"+
		"Z\u01c9\u0001\u0000\u0000\u0000\\\u01dd\u0001\u0000\u0000\u0000^\u01df"+
		"\u0001\u0000\u0000\u0000`\u01ec\u0001\u0000\u0000\u0000b\u01f6\u0001\u0000"+
		"\u0000\u0000d\u01f8\u0001\u0000\u0000\u0000f\u01fd\u0001\u0000\u0000\u0000"+
		"h\u01ff\u0001\u0000\u0000\u0000j\u0204\u0001\u0000\u0000\u0000l\u0207"+
		"\u0001\u0000\u0000\u0000n\u020f\u0001\u0000\u0000\u0000ps\u0003\u000e"+
		"\u0007\u0000qs\u0003\u0002\u0001\u0000rp\u0001\u0000\u0000\u0000rq\u0001"+
		"\u0000\u0000\u0000su\u0001\u0000\u0000\u0000tv\u0003\u0010\b\u0000ut\u0001"+
		"\u0000\u0000\u0000vw\u0001\u0000\u0000\u0000wu\u0001\u0000\u0000\u0000"+
		"wx\u0001\u0000\u0000\u0000xz\u0001\u0000\u0000\u0000yr\u0001\u0000\u0000"+
		"\u0000z{\u0001\u0000\u0000\u0000{y\u0001\u0000\u0000\u0000{|\u0001\u0000"+
		"\u0000\u0000|}\u0001\u0000\u0000\u0000}~\u0005\u0000\u0000\u0001~\u0001"+
		"\u0001\u0000\u0000\u0000\u007f\u0082\u0003*\u0015\u0000\u0080\u0082\u0003"+
		"\u0004\u0002\u0000\u0081\u007f\u0001\u0000\u0000\u0000\u0081\u0080\u0001"+
		"\u0000\u0000\u0000\u0082\u0083\u0001\u0000\u0000\u0000\u0083\u0084\u0005"+
		"\u0001\u0000\u0000\u0084\u0087\u0001\u0000\u0000\u0000\u0085\u0087\u0003"+
		"\u0006\u0003\u0000\u0086\u0081\u0001\u0000\u0000\u0000\u0086\u0085\u0001"+
		"\u0000\u0000\u0000\u0087\u0003\u0001\u0000\u0000\u0000\u0088\u0089\u0005"+
		"$\u0000\u0000\u0089\u008a\u0003b1\u0000\u008a\u008b\u0005%\u0000\u0000"+
		"\u008b\u008c\u0005\u0012\u0000\u0000\u008c\u008d\u0005\u0016\u0000\u0000"+
		"\u008d\u0005\u0001\u0000\u0000\u0000\u008e\u008f\u0003\b\u0004\u0000\u008f"+
		"\u0090\u0005\u0002\u0000\u0000\u0090\u0091\u0003\u0010\b\u0000\u0091\u0092"+
		"\u0003\n\u0005\u0000\u0092\u0007\u0001\u0000\u0000\u0000\u0093\u0094\u0005"+
		"\u0017\u0000\u0000\u0094\u00ab\u0007\u0000\u0000\u0000\u0095\u0096\u0005"+
		"\u0019\u0000\u0000\u0096\u00a0\u0003b1\u0000\u0097\u0098\u0005\u001a\u0000"+
		"\u0000\u0098\u009d\u0003n7\u0000\u0099\u009a\u0005\u0003\u0000\u0000\u009a"+
		"\u009c\u0003n7\u0000\u009b\u0099\u0001\u0000\u0000\u0000\u009c\u009f\u0001"+
		"\u0000\u0000\u0000\u009d\u009b\u0001\u0000\u0000\u0000\u009d\u009e\u0001"+
		"\u0000\u0000\u0000\u009e\u00a1\u0001\u0000\u0000\u0000\u009f\u009d\u0001"+
		"\u0000\u0000\u0000\u00a0\u0097\u0001\u0000\u0000\u0000\u00a0\u00a1\u0001"+
		"\u0000\u0000\u0000\u00a1\u00ac\u0001\u0000\u0000\u0000\u00a2\u00a3\u0005"+
		"\u001b\u0000\u0000\u00a3\u00a8\u0003n7\u0000\u00a4\u00a5\u0005\u0003\u0000"+
		"\u0000\u00a5\u00a7\u0003n7\u0000\u00a6\u00a4\u0001\u0000\u0000\u0000\u00a7"+
		"\u00aa\u0001\u0000\u0000\u0000\u00a8\u00a6\u0001\u0000\u0000\u0000\u00a8"+
		"\u00a9\u0001\u0000\u0000\u0000\u00a9\u00ac\u0001\u0000\u0000\u0000\u00aa"+
		"\u00a8\u0001\u0000\u0000\u0000\u00ab\u0095\u0001\u0000\u0000\u0000\u00ab"+
		"\u00a2\u0001\u0000\u0000\u0000\u00ab\u00ac\u0001\u0000\u0000\u0000\u00ac"+
		"\t\u0001\u0000\u0000\u0000\u00ad\u00b4\u0005L\u0000\u0000\u00ae\u00af"+
		"\u0003\u000e\u0007\u0000\u00af\u00b0\u0003\u0010\b\u0000\u00b0\u00b3\u0001"+
		"\u0000\u0000\u0000\u00b1\u00b3\u0003\u0012\t\u0000\u00b2\u00ae\u0001\u0000"+
		"\u0000\u0000\u00b2\u00b1\u0001\u0000\u0000\u0000\u00b3\u00b6\u0001\u0000"+
		"\u0000\u0000\u00b4\u00b2\u0001\u0000\u0000\u0000\u00b4\u00b5\u0001\u0000"+
		"\u0000\u0000\u00b5\u00b7\u0001\u0000\u0000\u0000\u00b6\u00b4\u0001\u0000"+
		"\u0000\u0000\u00b7\u00b8\u0003&\u0013\u0000\u00b8\u00b9\u0005\u0001\u0000"+
		"\u0000\u00b9\u00ba\u0003\u0010\b\u0000\u00ba\u00bb\u0005M\u0000\u0000"+
		"\u00bb\u000b\u0001\u0000\u0000\u0000\u00bc\u00c3\u0005L\u0000\u0000\u00bd"+
		"\u00be\u0003\u000e\u0007\u0000\u00be\u00bf\u0003\u0010\b\u0000\u00bf\u00c2"+
		"\u0001\u0000\u0000\u0000\u00c0\u00c2\u0003\u0012\t\u0000\u00c1\u00bd\u0001"+
		"\u0000\u0000\u0000\u00c1\u00c0\u0001\u0000\u0000\u0000\u00c2\u00c5\u0001"+
		"\u0000\u0000\u0000\u00c3\u00c1\u0001\u0000\u0000\u0000\u00c3\u00c4\u0001"+
		"\u0000\u0000\u0000\u00c4\u00c6\u0001\u0000\u0000\u0000\u00c5\u00c3\u0001"+
		"\u0000\u0000\u0000\u00c6\u00c7\u0003\u0014\n\u0000\u00c7\u00c8\u0005M"+
		"\u0000\u0000\u00c8\r\u0001\u0000\u0000\u0000\u00c9\u00ca\u0005\u0015\u0000"+
		"\u0000\u00ca\u000f\u0001\u0000\u0000\u0000\u00cb\u00cc\u0005N\u0000\u0000"+
		"\u00cc\u0011\u0001\u0000\u0000\u0000\u00cd\u00ce\u0003(\u0014\u0000\u00ce"+
		"\u00cf\u0005\u0004\u0000\u0000\u00cf\u00d0\u0003\u0010\b\u0000\u00d0\u00d3"+
		"\u0001\u0000\u0000\u0000\u00d1\u00d3\u0003\u0016\u000b\u0000\u00d2\u00cd"+
		"\u0001\u0000\u0000\u0000\u00d2\u00d1\u0001\u0000\u0000\u0000\u00d3\u0013"+
		"\u0001\u0000\u0000\u0000\u00d4\u00d7\u0003(\u0014\u0000\u00d5\u00d7\u0003"+
		"&\u0013\u0000\u00d6\u00d4\u0001\u0000\u0000\u0000\u00d6\u00d5\u0001\u0000"+
		"\u0000\u0000\u00d7\u00d8\u0001\u0000\u0000\u0000\u00d8\u00d9\u0005\u0005"+
		"\u0000\u0000\u00d9\u00da\u0003\u0010\b\u0000\u00da\u00dd\u0001\u0000\u0000"+
		"\u0000\u00db\u00dd\u0003\u0016\u000b\u0000\u00dc\u00d6\u0001\u0000\u0000"+
		"\u0000\u00dc\u00db\u0001\u0000\u0000\u0000\u00dd\u0015\u0001\u0000\u0000"+
		"\u0000\u00de\u00e1\u0003\u0018\f\u0000\u00df\u00e1\u0003 \u0010\u0000"+
		"\u00e0\u00de\u0001\u0000\u0000\u0000\u00e0\u00df\u0001\u0000\u0000\u0000"+
		"\u00e1\u0017\u0001\u0000\u0000\u0000\u00e2\u00e6\u0003\u001a\r\u0000\u00e3"+
		"\u00e5\u0003\u001c\u000e\u0000\u00e4\u00e3\u0001\u0000\u0000\u0000\u00e5"+
		"\u00e8\u0001\u0000\u0000\u0000\u00e6\u00e4\u0001\u0000\u0000\u0000\u00e6"+
		"\u00e7\u0001\u0000\u0000\u0000\u00e7\u00ea\u0001\u0000\u0000\u0000\u00e8"+
		"\u00e6\u0001\u0000\u0000\u0000\u00e9\u00eb\u0003\u001e\u000f\u0000\u00ea"+
		"\u00e9\u0001\u0000\u0000\u0000\u00ea\u00eb\u0001\u0000\u0000\u0000\u00eb"+
		"\u0019\u0001\u0000\u0000\u0000\u00ec\u00ed\u0005\u001c\u0000\u0000\u00ed"+
		"\u00ee\u0003$\u0012\u0000\u00ee\u00ef\u0005\u001d\u0000\u0000\u00ef\u00f0"+
		"\u0005\u0002\u0000\u0000\u00f0\u00f1\u0003\u0010\b\u0000\u00f1\u00f2\u0003"+
		"\f\u0006\u0000\u00f2\u001b\u0001\u0000\u0000\u0000\u00f3\u00f4\u0005\u001e"+
		"\u0000\u0000\u00f4\u00f5\u0003$\u0012\u0000\u00f5\u00f6\u0005\u001d\u0000"+
		"\u0000\u00f6\u00f7\u0005\u0002\u0000\u0000\u00f7\u00f8\u0003\u0010\b\u0000"+
		"\u00f8\u00f9\u0003\f\u0006\u0000\u00f9\u001d\u0001\u0000\u0000\u0000\u00fa"+
		"\u00fb\u0005\u001f\u0000\u0000\u00fb\u00fc\u0005\u0002\u0000\u0000\u00fc"+
		"\u00fd\u0003\u0010\b\u0000\u00fd\u00fe\u0003\f\u0006\u0000\u00fe\u001f"+
		"\u0001\u0000\u0000\u0000\u00ff\u0100\u0005 \u0000\u0000\u0100\u0101\u0003"+
		"\"\u0011\u0000\u0101\u0102\u0005\u0002\u0000\u0000\u0102\u0103\u0003\u0010"+
		"\b\u0000\u0103\u0104\u0003\f\u0006\u0000\u0104!\u0001\u0000\u0000\u0000"+
		"\u0105\u0106\u0005!\u0000\u0000\u0106\u010b\u0003$\u0012\u0000\u0107\u0108"+
		"\u00038\u001c\u0000\u0108\u0109\u0005\"\u0000\u0000\u0109\u010b\u0001"+
		"\u0000\u0000\u0000\u010a\u0105\u0001\u0000\u0000\u0000\u010a\u0107\u0001"+
		"\u0000\u0000\u0000\u010b#\u0001\u0000\u0000\u0000\u010c\u010f\u0003V+"+
		"\u0000\u010d\u010f\u0003Z-\u0000\u010e\u010c\u0001\u0000\u0000\u0000\u010e"+
		"\u010d\u0001\u0000\u0000\u0000\u010f%\u0001\u0000\u0000\u0000\u0110\u0111"+
		"\u0005#\u0000\u0000\u0111\u0112\u00036\u001b\u0000\u0112\'\u0001\u0000"+
		"\u0000\u0000\u0113\u0116\u0003*\u0015\u0000\u0114\u0116\u00030\u0018\u0000"+
		"\u0115\u0113\u0001\u0000\u0000\u0000\u0115\u0114\u0001\u0000\u0000\u0000"+
		"\u0116)\u0001\u0000\u0000\u0000\u0117\u0119\u0003,\u0016\u0000\u0118\u011a"+
		"\u0003.\u0017\u0000\u0119\u0118\u0001\u0000\u0000\u0000\u0119\u011a\u0001"+
		"\u0000\u0000\u0000\u011a+\u0001\u0000\u0000\u0000\u011b\u011c\u0005$\u0000"+
		"\u0000\u011c\u011d\u0003b1\u0000\u011d\u011e\u0005%\u0000\u0000\u011e"+
		"\u011f\u0005\u0013\u0000\u0000\u011f-\u0001\u0000\u0000\u0000\u0120\u0123"+
		"\u0005&\u0000\u0000\u0121\u0124\u00038\u001c\u0000\u0122\u0124\u0003B"+
		"!\u0000\u0123\u0121\u0001\u0000\u0000\u0000\u0123\u0122\u0001\u0000\u0000"+
		"\u0000\u0124/\u0001\u0000\u0000\u0000\u0125\u0129\u00032\u0019\u0000\u0126"+
		"\u0129\u0003^/\u0000\u0127\u0129\u00034\u001a\u0000\u0128\u0125\u0001"+
		"\u0000\u0000\u0000\u0128\u0126\u0001\u0000\u0000\u0000\u0128\u0127\u0001"+
		"\u0000\u0000\u0000\u01291\u0001\u0000\u0000\u0000\u012a\u012d\u0005\'"+
		"\u0000\u0000\u012b\u012e\u0003:\u001d\u0000\u012c\u012e\u00056\u0000\u0000"+
		"\u012d\u012b\u0001\u0000\u0000\u0000\u012d\u012c\u0001\u0000\u0000\u0000"+
		"\u012e\u012f\u0001\u0000\u0000\u0000\u012f\u0133\u0005(\u0000\u0000\u0130"+
		"\u0134\u00036\u001b\u0000\u0131\u0134\u0003B!\u0000\u0132\u0134\u0005"+
		"7\u0000\u0000\u0133\u0130\u0001\u0000\u0000\u0000\u0133\u0131\u0001\u0000"+
		"\u0000\u0000\u0133\u0132\u0001\u0000\u0000\u0000\u01343\u0001\u0000\u0000"+
		"\u0000\u0135\u0136\u0005)\u0000\u0000\u0136\u0137\u00038\u001c\u0000\u0137"+
		"\u0138\u0005*\u0000\u0000\u0138\u0139\u0003>\u001f\u0000\u0139\u0147\u0001"+
		"\u0000\u0000\u0000\u013a\u013b\u0005+\u0000\u0000\u013b\u0147\u0003>\u001f"+
		"\u0000\u013c\u013d\u0005,\u0000\u0000\u013d\u013e\u0003:\u001d\u0000\u013e"+
		"\u013f\u0005*\u0000\u0000\u013f\u0140\u0003:\u001d\u0000\u0140\u0147\u0001"+
		"\u0000\u0000\u0000\u0141\u0142\u0005-\u0000\u0000\u0142\u0143\u0003:\u001d"+
		"\u0000\u0143\u0144\u0005*\u0000\u0000\u0144\u0145\u0003:\u001d\u0000\u0145"+
		"\u0147\u0001\u0000\u0000\u0000\u0146\u0135\u0001\u0000\u0000\u0000\u0146"+
		"\u013a\u0001\u0000\u0000\u0000\u0146\u013c\u0001\u0000\u0000\u0000\u0146"+
		"\u0141\u0001\u0000\u0000\u0000\u01475\u0001\u0000\u0000\u0000\u0148\u014f"+
		"\u00038\u001c\u0000\u0149\u014f\u0003P(\u0000\u014a\u014b\u0005\u0006"+
		"\u0000\u0000\u014b\u014c\u0003^/\u0000\u014c\u014d\u0005\u0007\u0000\u0000"+
		"\u014d\u014f\u0001\u0000\u0000\u0000\u014e\u0148\u0001\u0000\u0000\u0000"+
		"\u014e\u0149\u0001\u0000\u0000\u0000\u014e\u014a\u0001\u0000\u0000\u0000"+
		"\u014f7\u0001\u0000\u0000\u0000\u0150\u0153\u0003:\u001d\u0000\u0151\u0153"+
		"\u0003D\"\u0000\u0152\u0150\u0001\u0000\u0000\u0000\u0152\u0151\u0001"+
		"\u0000\u0000\u0000\u01539\u0001\u0000\u0000\u0000\u0154\u0157\u0003<\u001e"+
		"\u0000\u0155\u0157\u0003>\u001f\u0000\u0156\u0154\u0001\u0000\u0000\u0000"+
		"\u0156\u0155\u0001\u0000\u0000\u0000\u0157;\u0001\u0000\u0000\u0000\u0158"+
		"\u0159\u0005\u0013\u0000\u0000\u0159=\u0001\u0000\u0000\u0000\u015a\u015b"+
		"\u0003<\u001e\u0000\u015b\u015c\u00054\u0000\u0000\u015c\u015d\u0003@"+
		" \u0000\u015d?\u0001\u0000\u0000\u0000\u015e\u0164\u0005\u0014\u0000\u0000"+
		"\u015f\u0160\u00055\u0000\u0000\u0160\u0164\u0005\u0013\u0000\u0000\u0161"+
		"\u0164\u0003<\u001e\u0000\u0162\u0164\u0003B!\u0000\u0163\u015e\u0001"+
		"\u0000\u0000\u0000\u0163\u015f\u0001\u0000\u0000\u0000\u0163\u0161\u0001"+
		"\u0000\u0000\u0000\u0163\u0162\u0001\u0000\u0000\u0000\u0164A\u0001\u0000"+
		"\u0000\u0000\u0165\u016b\u0001\u0000\u0000\u0000\u0166\u016b\u00058\u0000"+
		"\u0000\u0167\u0168\u00059\u0000\u0000\u0168\u016b\u0003<\u001e\u0000\u0169"+
		"\u016b\u0005:\u0000\u0000\u016a\u0165\u0001\u0000\u0000\u0000\u016a\u0166"+
		"\u0001\u0000\u0000\u0000\u016a\u0167\u0001\u0000\u0000\u0000\u016a\u0169"+
		"\u0001\u0000\u0000\u0000\u016bC\u0001\u0000\u0000\u0000\u016c\u0172\u0005"+
		"\u0010\u0000\u0000\u016d\u0172\u0003F#\u0000\u016e\u0172\u0005\u0011\u0000"+
		"\u0000\u016f\u0172\u0005;\u0000\u0000\u0170\u0172\u0003H$\u0000\u0171"+
		"\u016c\u0001\u0000\u0000\u0000\u0171\u016d\u0001\u0000\u0000\u0000\u0171"+
		"\u016e\u0001\u0000\u0000\u0000\u0171\u016f\u0001\u0000\u0000\u0000\u0171"+
		"\u0170\u0001\u0000\u0000\u0000\u0172E\u0001\u0000\u0000\u0000\u0173\u0175"+
		"\u0005\b\u0000\u0000\u0174\u0173\u0001\u0000\u0000\u0000\u0174\u0175\u0001"+
		"\u0000\u0000\u0000\u0175\u0176\u0001\u0000\u0000\u0000\u0176\u0179\u0005"+
		"\u0014\u0000\u0000\u0177\u0178\u0005\u0001\u0000\u0000\u0178\u017a\u0005"+
		"\u0014\u0000\u0000\u0179\u0177\u0001\u0000\u0000\u0000\u0179\u017a\u0001"+
		"\u0000\u0000\u0000\u017aG\u0001\u0000\u0000\u0000\u017b\u017f\u0003J%"+
		"\u0000\u017c\u017f\u0003L&\u0000\u017d\u017f\u0003N\'\u0000\u017e\u017b"+
		"\u0001\u0000\u0000\u0000\u017e\u017c\u0001\u0000\u0000\u0000\u017e\u017d"+
		"\u0001\u0000\u0000\u0000\u017fI\u0001\u0000\u0000\u0000\u0180\u0181\u0005"+
		"\t\u0000\u0000\u0181\u0186\u0003D\"\u0000\u0182\u0183\u0005\u0003\u0000"+
		"\u0000\u0183\u0185\u0003D\"\u0000\u0184\u0182\u0001\u0000\u0000\u0000"+
		"\u0185\u0188\u0001\u0000\u0000\u0000\u0186\u0184\u0001\u0000\u0000\u0000"+
		"\u0186\u0187\u0001\u0000\u0000\u0000\u0187\u0189\u0001\u0000\u0000\u0000"+
		"\u0188\u0186\u0001\u0000\u0000\u0000\u0189\u018a\u0005\n\u0000\u0000\u018a"+
		"K\u0001\u0000\u0000\u0000\u018b\u0194\u0005\u000b\u0000\u0000\u018c\u0191"+
		"\u0003D\"\u0000\u018d\u018e\u0005\f\u0000\u0000\u018e\u0190\u0003D\"\u0000"+
		"\u018f\u018d\u0001\u0000\u0000\u0000\u0190\u0193\u0001\u0000\u0000\u0000"+
		"\u0191\u018f\u0001\u0000\u0000\u0000\u0191\u0192\u0001\u0000\u0000\u0000"+
		"\u0192\u0195\u0001\u0000\u0000\u0000\u0193\u0191\u0001\u0000\u0000\u0000"+
		"\u0194\u018c\u0001\u0000\u0000\u0000\u0194\u0195\u0001\u0000\u0000\u0000"+
		"\u0195\u0196\u0001\u0000\u0000\u0000\u0196\u0197\u0005\u000b\u0000\u0000"+
		"\u0197M\u0001\u0000\u0000\u0000\u0198\u0199\u0005\r\u0000\u0000\u0199"+
		"\u019e\u0003D\"\u0000\u019a\u019b\u0005\u0003\u0000\u0000\u019b\u019d"+
		"\u0003D\"\u0000\u019c\u019a\u0001\u0000\u0000\u0000\u019d\u01a0\u0001"+
		"\u0000\u0000\u0000\u019e\u019c\u0001\u0000\u0000\u0000\u019e\u019f\u0001"+
		"\u0000\u0000\u0000\u019f\u01a1\u0001\u0000\u0000\u0000\u01a0\u019e\u0001"+
		"\u0000\u0000\u0000\u01a1\u01a2\u0005\u000e\u0000\u0000\u01a2O\u0001\u0000"+
		"\u0000\u0000\u01a3\u01a7\u0003R)\u0000\u01a4\u01a7\u0003V+\u0000\u01a5"+
		"\u01a7\u0003Z-\u0000\u01a6\u01a3\u0001\u0000\u0000\u0000\u01a6\u01a4\u0001"+
		"\u0000\u0000\u0000\u01a6\u01a5\u0001\u0000\u0000\u0000\u01a7Q\u0001\u0000"+
		"\u0000\u0000\u01a8\u01a9\u0005\u0006\u0000\u0000\u01a9\u01aa\u0003T*\u0000"+
		"\u01aa\u01ab\u0007\u0001\u0000\u0000\u01ab\u01ac\u0003T*\u0000\u01ac\u01ad"+
		"\u0005\u0007\u0000\u0000\u01adS\u0001\u0000\u0000\u0000\u01ae\u01b3\u0003"+
		":\u001d\u0000\u01af\u01b3\u0003F#\u0000\u01b0\u01b3\u0003B!\u0000\u01b1"+
		"\u01b3\u0003R)\u0000\u01b2\u01ae\u0001\u0000\u0000\u0000\u01b2\u01af\u0001"+
		"\u0000\u0000\u0000\u01b2\u01b0\u0001\u0000\u0000\u0000\u01b2\u01b1\u0001"+
		"\u0000\u0000\u0000\u01b3U\u0001\u0000\u0000\u0000\u01b4\u01bf\u0005\u0006"+
		"\u0000\u0000\u01b5\u01b6\u0003X,\u0000\u01b6\u01b7\u0005A\u0000\u0000"+
		"\u01b7\u01b8\u0003X,\u0000\u01b8\u01c0\u0001\u0000\u0000\u0000\u01b9\u01ba"+
		"\u0003X,\u0000\u01ba\u01bb\u0005B\u0000\u0000\u01bb\u01bc\u0003X,\u0000"+
		"\u01bc\u01c0\u0001\u0000\u0000\u0000\u01bd\u01be\u0005C\u0000\u0000\u01be"+
		"\u01c0\u0003X,\u0000\u01bf\u01b5\u0001\u0000\u0000\u0000\u01bf\u01b9\u0001"+
		"\u0000\u0000\u0000\u01bf\u01bd\u0001\u0000\u0000\u0000\u01c0\u01c1\u0001"+
		"\u0000\u0000\u0000\u01c1\u01c2\u0005\u0007\u0000\u0000\u01c2W\u0001\u0000"+
		"\u0000\u0000\u01c3\u01c8\u0005\u0011\u0000\u0000\u01c4\u01c8\u0003:\u001d"+
		"\u0000\u01c5\u01c8\u0003Z-\u0000\u01c6\u01c8\u0003V+\u0000\u01c7\u01c3"+
		"\u0001\u0000\u0000\u0000\u01c7\u01c4\u0001\u0000\u0000\u0000\u01c7\u01c5"+
		"\u0001\u0000\u0000\u0000\u01c7\u01c6\u0001\u0000\u0000\u0000\u01c8Y\u0001"+
		"\u0000\u0000\u0000\u01c9\u01d6\u0005\u0006\u0000\u0000\u01ca\u01cb\u0003"+
		"T*\u0000\u01cb\u01cc\u0005D\u0000\u0000\u01cc\u01cd\u0003T*\u0000\u01cd"+
		"\u01d7\u0001\u0000\u0000\u0000\u01ce\u01cf\u0003T*\u0000\u01cf\u01d0\u0005"+
		"E\u0000\u0000\u01d0\u01d1\u0003T*\u0000\u01d1\u01d7\u0001\u0000\u0000"+
		"\u0000\u01d2\u01d3\u0003\\.\u0000\u01d3\u01d4\u0005F\u0000\u0000\u01d4"+
		"\u01d5\u0003\\.\u0000\u01d5\u01d7\u0001\u0000\u0000\u0000\u01d6\u01ca"+
		"\u0001\u0000\u0000\u0000\u01d6\u01ce\u0001\u0000\u0000\u0000\u01d6\u01d2"+
		"\u0001\u0000\u0000\u0000\u01d7\u01d8\u0001\u0000\u0000\u0000\u01d8\u01d9"+
		"\u0005\u0007\u0000\u0000\u01d9[\u0001\u0000\u0000\u0000\u01da\u01de\u0003"+
		"8\u001c\u0000\u01db\u01de\u0003B!\u0000\u01dc\u01de\u0003R)\u0000\u01dd"+
		"\u01da\u0001\u0000\u0000\u0000\u01dd\u01db\u0001\u0000\u0000\u0000\u01dd"+
		"\u01dc\u0001\u0000\u0000\u0000\u01de]\u0001\u0000\u0000\u0000\u01df\u01e0"+
		"\u0005G\u0000\u0000\u01e0\u01ea\u0003`0\u0000\u01e1\u01e2\u0005H\u0000"+
		"\u0000\u01e2\u01e7\u00038\u001c\u0000\u01e3\u01e4\u0005\u0003\u0000\u0000"+
		"\u01e4\u01e6\u00038\u001c\u0000\u01e5\u01e3\u0001\u0000\u0000\u0000\u01e6"+
		"\u01e9\u0001\u0000\u0000\u0000\u01e7\u01e5\u0001\u0000\u0000\u0000\u01e7"+
		"\u01e8\u0001\u0000\u0000\u0000\u01e8\u01eb\u0001\u0000\u0000\u0000\u01e9"+
		"\u01e7\u0001\u0000\u0000\u0000\u01ea\u01e1\u0001\u0000\u0000\u0000\u01ea"+
		"\u01eb\u0001\u0000\u0000\u0000\u01eb_\u0001\u0000\u0000\u0000\u01ec\u01ed"+
		"\u0005\u0013\u0000\u0000\u01eda\u0001\u0000\u0000\u0000\u01ee\u01f7\u0005"+
		".\u0000\u0000\u01ef\u01f7\u0005/\u0000\u0000\u01f0\u01f7\u00050\u0000"+
		"\u0000\u01f1\u01f7\u0003d2\u0000\u01f2\u01f3\u0005\u0006\u0000\u0000\u01f3"+
		"\u01f4\u0003f3\u0000\u01f4\u01f5\u0005\u0007\u0000\u0000\u01f5\u01f7\u0001"+
		"\u0000\u0000\u0000\u01f6\u01ee\u0001\u0000\u0000\u0000\u01f6\u01ef\u0001"+
		"\u0000\u0000\u0000\u01f6\u01f0\u0001\u0000\u0000\u0000\u01f6\u01f1\u0001"+
		"\u0000\u0000\u0000\u01f6\u01f2\u0001\u0000\u0000\u0000\u01f7c\u0001\u0000"+
		"\u0000\u0000\u01f8\u01f9\u0005\u0012\u0000\u0000\u01f9e\u0001\u0000\u0000"+
		"\u0000\u01fa\u01fe\u0003h4\u0000\u01fb\u01fe\u0003j5\u0000\u01fc\u01fe"+
		"\u0003l6\u0000\u01fd\u01fa\u0001\u0000\u0000\u0000\u01fd\u01fb\u0001\u0000"+
		"\u0000\u0000\u01fd\u01fc\u0001\u0000\u0000\u0000\u01feg\u0001\u0000\u0000"+
		"\u0000\u01ff\u0200\u00051\u0000\u0000\u0200\u0201\u0005\u0014\u0000\u0000"+
		"\u0201\u0202\u0005\u000f\u0000\u0000\u0202\u0203\u0003b1\u0000\u0203i"+
		"\u0001\u0000\u0000\u0000\u0204\u0205\u00052\u0000\u0000\u0205\u0206\u0003"+
		"b1\u0000\u0206k\u0001\u0000\u0000\u0000\u0207\u0208\u00053\u0000\u0000"+
		"\u0208\u020b\u0003n7\u0000\u0209\u020a\u0005\u0003\u0000\u0000\u020a\u020c"+
		"\u0003n7\u0000\u020b\u0209\u0001\u0000\u0000\u0000\u020c\u020d\u0001\u0000"+
		"\u0000\u0000\u020d\u020b\u0001\u0000\u0000\u0000\u020d\u020e\u0001\u0000"+
		"\u0000\u0000\u020em\u0001\u0000\u0000\u0000\u020f\u0210\u0003b1\u0000"+
		"\u0210\u0211\u0005\u000f\u0000\u0000\u0211\u0212\u0005\u0013\u0000\u0000"+
		"\u0212o\u0001\u0000\u0000\u00004rw{\u0081\u0086\u009d\u00a0\u00a8\u00ab"+
		"\u00b2\u00b4\u00c1\u00c3\u00d2\u00d6\u00dc\u00e0\u00e6\u00ea\u010a\u010e"+
		"\u0115\u0119\u0123\u0128\u012d\u0133\u0146\u014e\u0152\u0156\u0163\u016a"+
		"\u0171\u0174\u0179\u017e\u0186\u0191\u0194\u019e\u01a6\u01b2\u01bf\u01c7"+
		"\u01d6\u01dd\u01e7\u01ea\u01f6\u01fd\u020d";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}