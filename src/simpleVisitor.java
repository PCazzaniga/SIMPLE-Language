/*
 * Copyright (c) 2025 PCazzaniga (github.com)
 *
 *     simpleVisitor.java is part of SIMPLE.
 *
 *     SIMPLE is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     SIMPLE is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with SIMPLE.  If not, see <http://www.gnu.org/licenses/>.
 */

// Generated by ANTLR 4.13.2
import org.antlr.v4.runtime.tree.ParseTreeVisitor;

interface simpleVisitor<T> extends ParseTreeVisitor<T> {
	
	T visitFile(simpleParser.FileContext ctx);
	
	T visitInformation(simpleParser.InformationContext ctx);
	
	T visitType_decl(simpleParser.Type_declContext ctx);
	
	T visitFun_decl(simpleParser.Fun_declContext ctx);
	
	T visitFun_def(simpleParser.Fun_defContext ctx);
	
	T visitFun_body(simpleParser.Fun_bodyContext ctx);
	
	T visitScope_block(simpleParser.Scope_blockContext ctx);
	
	T visitComment(simpleParser.CommentContext ctx);
	
	T visitNl(simpleParser.NlContext ctx);
	
	T visitStatement(simpleParser.StatementContext ctx);
	
	T visitCloser(simpleParser.CloserContext ctx);
	
	T visitFlow_control(simpleParser.Flow_controlContext ctx);
	
	T visitBranch(simpleParser.BranchContext ctx);
	
	T visitIf_cond(simpleParser.If_condContext ctx);
	
	T visitElif_cond(simpleParser.Elif_condContext ctx);
	
	T visitElse_cond(simpleParser.Else_condContext ctx);
	
	T visitLoop(simpleParser.LoopContext ctx);
	
	T visitCondLoop(simpleParser.CondLoopContext ctx);
	
	T visitQuantLoop(simpleParser.QuantLoopContext ctx);
	
	T visitCondition(simpleParser.ConditionContext ctx);
	
	T visitReturn(simpleParser.ReturnContext ctx);
	
	T visitInstruction(simpleParser.InstructionContext ctx);
	
	T visitVar_decl(simpleParser.Var_declContext ctx);
	
	T visitVar_def(simpleParser.Var_defContext ctx);
	
	T visitVar_init(simpleParser.Var_initContext ctx);
	
	T visitExpr(simpleParser.ExprContext ctx);
	
	T visitAssignment(simpleParser.AssignmentContext ctx);
	
	T visitListInsertion(simpleParser.ListInsertionContext ctx);
	
	T visitListRemoval(simpleParser.ListRemovalContext ctx);
	
	T visitText2List(simpleParser.Text2ListContext ctx);
	
	T visitList2Text(simpleParser.List2TextContext ctx);
	
	T visitValue(simpleParser.ValueContext ctx);
	
	T visitDirect_value(simpleParser.Direct_valueContext ctx);
	
	T visitVariable(simpleParser.VariableContext ctx);
	
	T visitVar_name(simpleParser.Var_nameContext ctx);
	
	T visitStruct_access(simpleParser.Struct_accessContext ctx);
	
	T visitAccess(simpleParser.AccessContext ctx);
	
	T visitReserved(simpleParser.ReservedContext ctx);
	
	T visitLiteral(simpleParser.LiteralContext ctx);
	
	T visitNumber(simpleParser.NumberContext ctx);
	
	T visitStruct_lit(simpleParser.Struct_litContext ctx);
	
	T visitSequence(simpleParser.SequenceContext ctx);
	
	T visitList(simpleParser.ListContext ctx);
	
	T visitKit(simpleParser.KitContext ctx);
	
	T visitOperation(simpleParser.OperationContext ctx);
	
	T visitArith_op(simpleParser.Arith_opContext ctx);
	
	T visitAr_oprnd(simpleParser.Ar_oprndContext ctx);
	
	T visitLogic_op(simpleParser.Logic_opContext ctx);
	
	T visitLog_oprnd(simpleParser.Log_oprndContext ctx);
	
	T visitCompare_op(simpleParser.Compare_opContext ctx);
	
	T visitComp_oprnd(simpleParser.Comp_oprndContext ctx);
	
	T visitFun_call(simpleParser.Fun_callContext ctx);
	
	T visitFun_name(simpleParser.Fun_nameContext ctx);
	
	T visitType(simpleParser.TypeContext ctx);
	
	T visitDeclared_type(simpleParser.Declared_typeContext ctx);
	
	T visitStruct_type(simpleParser.Struct_typeContext ctx);
	
	T visitSeq_type(simpleParser.Seq_typeContext ctx);
	
	T visitList_type(simpleParser.List_typeContext ctx);
	
	T visitKit_type(simpleParser.Kit_typeContext ctx);
	
	T visitParam(simpleParser.ParamContext ctx);
}