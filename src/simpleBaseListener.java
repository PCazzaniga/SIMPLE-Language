/*
 * Copyright (c) 2025 PCazzaniga (github.com)
 *
 *     simpleBaseListener.java is part of SIMPLE.
 *
 *     SIMPLE is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     SIMPLE is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with SIMPLE.  If not, see <http://www.gnu.org/licenses/>.
 */

// Generated by ANTLR 4.13.2

import org.antlr.v4.runtime.ParserRuleContext;
import org.antlr.v4.runtime.tree.ErrorNode;
import org.antlr.v4.runtime.tree.TerminalNode;

@SuppressWarnings("CheckReturnValue")
class simpleBaseListener implements simpleListener {
	
	@Override public void enterFile(simpleParser.FileContext ctx) { }
	
	@Override public void exitFile(simpleParser.FileContext ctx) { }
	
	@Override public void enterInformation(simpleParser.InformationContext ctx) { }
	
	@Override public void exitInformation(simpleParser.InformationContext ctx) { }
	
	@Override public void enterType_decl(simpleParser.Type_declContext ctx) { }
	
	@Override public void exitType_decl(simpleParser.Type_declContext ctx) { }
	
	@Override public void enterFun_decl(simpleParser.Fun_declContext ctx) { }
	
	@Override public void exitFun_decl(simpleParser.Fun_declContext ctx) { }
	
	@Override public void enterFun_def(simpleParser.Fun_defContext ctx) { }
	
	@Override public void exitFun_def(simpleParser.Fun_defContext ctx) { }
	
	@Override public void enterFun_body(simpleParser.Fun_bodyContext ctx) { }
	
	@Override public void exitFun_body(simpleParser.Fun_bodyContext ctx) { }
	
	@Override public void enterScope_block(simpleParser.Scope_blockContext ctx) { }
	
	@Override public void exitScope_block(simpleParser.Scope_blockContext ctx) { }
	
	@Override public void enterComment(simpleParser.CommentContext ctx) { }
	
	@Override public void exitComment(simpleParser.CommentContext ctx) { }
	
	@Override public void enterNl(simpleParser.NlContext ctx) { }
	
	@Override public void exitNl(simpleParser.NlContext ctx) { }
	
	@Override public void enterStatement(simpleParser.StatementContext ctx) { }
	
	@Override public void exitStatement(simpleParser.StatementContext ctx) { }
	
	@Override public void enterCloser(simpleParser.CloserContext ctx) { }
	
	@Override public void exitCloser(simpleParser.CloserContext ctx) { }
	
	@Override public void enterFlow_control(simpleParser.Flow_controlContext ctx) { }
	
	@Override public void exitFlow_control(simpleParser.Flow_controlContext ctx) { }
	
	@Override public void enterBranch(simpleParser.BranchContext ctx) { }
	
	@Override public void exitBranch(simpleParser.BranchContext ctx) { }
	
	@Override public void enterIf_cond(simpleParser.If_condContext ctx) { }
	
	@Override public void exitIf_cond(simpleParser.If_condContext ctx) { }
	
	@Override public void enterElif_cond(simpleParser.Elif_condContext ctx) { }
	
	@Override public void exitElif_cond(simpleParser.Elif_condContext ctx) { }
	
	@Override public void enterElse_cond(simpleParser.Else_condContext ctx) { }
	
	@Override public void exitElse_cond(simpleParser.Else_condContext ctx) { }
	
	@Override public void enterLoop(simpleParser.LoopContext ctx) { }
	
	@Override public void exitLoop(simpleParser.LoopContext ctx) { }
	
	@Override public void enterCondLoop(simpleParser.CondLoopContext ctx) { }
	
	@Override public void exitCondLoop(simpleParser.CondLoopContext ctx) { }
	
	@Override public void enterQuantLoop(simpleParser.QuantLoopContext ctx) { }
	
	@Override public void exitQuantLoop(simpleParser.QuantLoopContext ctx) { }
	
	@Override public void enterCondition(simpleParser.ConditionContext ctx) { }
	
	@Override public void exitCondition(simpleParser.ConditionContext ctx) { }
	
	@Override public void enterReturn(simpleParser.ReturnContext ctx) { }
	
	@Override public void exitReturn(simpleParser.ReturnContext ctx) { }
	
	@Override public void enterInstruction(simpleParser.InstructionContext ctx) { }
	
	@Override public void exitInstruction(simpleParser.InstructionContext ctx) { }
	
	@Override public void enterVar_decl(simpleParser.Var_declContext ctx) { }
	
	@Override public void exitVar_decl(simpleParser.Var_declContext ctx) { }
	
	@Override public void enterVar_def(simpleParser.Var_defContext ctx) { }
	
	@Override public void exitVar_def(simpleParser.Var_defContext ctx) { }
	
	@Override public void enterVar_init(simpleParser.Var_initContext ctx) { }
	
	@Override public void exitVar_init(simpleParser.Var_initContext ctx) { }
	
	@Override public void enterExpr(simpleParser.ExprContext ctx) { }
	
	@Override public void exitExpr(simpleParser.ExprContext ctx) { }
	
	@Override public void enterAssignment(simpleParser.AssignmentContext ctx) { }
	
	@Override public void exitAssignment(simpleParser.AssignmentContext ctx) { }
	
	@Override public void enterListInsertion(simpleParser.ListInsertionContext ctx) { }
	
	@Override public void exitListInsertion(simpleParser.ListInsertionContext ctx) { }
	
	@Override public void enterListRemoval(simpleParser.ListRemovalContext ctx) { }
	
	@Override public void exitListRemoval(simpleParser.ListRemovalContext ctx) { }
	
	@Override public void enterText2List(simpleParser.Text2ListContext ctx) { }
	
	@Override public void exitText2List(simpleParser.Text2ListContext ctx) { }
	
	@Override public void enterList2Text(simpleParser.List2TextContext ctx) { }
	
	@Override public void exitList2Text(simpleParser.List2TextContext ctx) { }
	
	@Override public void enterValue(simpleParser.ValueContext ctx) { }
	
	@Override public void exitValue(simpleParser.ValueContext ctx) { }
	
	@Override public void enterDirect_value(simpleParser.Direct_valueContext ctx) { }
	
	@Override public void exitDirect_value(simpleParser.Direct_valueContext ctx) { }
	
	@Override public void enterVariable(simpleParser.VariableContext ctx) { }
	
	@Override public void exitVariable(simpleParser.VariableContext ctx) { }
	
	@Override public void enterVar_name(simpleParser.Var_nameContext ctx) { }
	
	@Override public void exitVar_name(simpleParser.Var_nameContext ctx) { }
	
	@Override public void enterStruct_access(simpleParser.Struct_accessContext ctx) { }
	
	@Override public void exitStruct_access(simpleParser.Struct_accessContext ctx) { }
	
	@Override public void enterAccess(simpleParser.AccessContext ctx) { }
	
	@Override public void exitAccess(simpleParser.AccessContext ctx) { }
	
	@Override public void enterReserved(simpleParser.ReservedContext ctx) { }
	
	@Override public void exitReserved(simpleParser.ReservedContext ctx) { }
	
	@Override public void enterLiteral(simpleParser.LiteralContext ctx) { }
	
	@Override public void exitLiteral(simpleParser.LiteralContext ctx) { }
	
	@Override public void enterNumber(simpleParser.NumberContext ctx) { }
	
	@Override public void exitNumber(simpleParser.NumberContext ctx) { }
	
	@Override public void enterStruct_lit(simpleParser.Struct_litContext ctx) { }
	
	@Override public void exitStruct_lit(simpleParser.Struct_litContext ctx) { }
	
	@Override public void enterSequence(simpleParser.SequenceContext ctx) { }
	
	@Override public void exitSequence(simpleParser.SequenceContext ctx) { }
	
	@Override public void enterList(simpleParser.ListContext ctx) { }
	
	@Override public void exitList(simpleParser.ListContext ctx) { }
	
	@Override public void enterKit(simpleParser.KitContext ctx) { }
	
	@Override public void exitKit(simpleParser.KitContext ctx) { }
	
	@Override public void enterOperation(simpleParser.OperationContext ctx) { }
	
	@Override public void exitOperation(simpleParser.OperationContext ctx) { }
	
	@Override public void enterArith_op(simpleParser.Arith_opContext ctx) { }
	
	@Override public void exitArith_op(simpleParser.Arith_opContext ctx) { }
	
	@Override public void enterAr_oprnd(simpleParser.Ar_oprndContext ctx) { }
	
	@Override public void exitAr_oprnd(simpleParser.Ar_oprndContext ctx) { }
	
	@Override public void enterLogic_op(simpleParser.Logic_opContext ctx) { }
	
	@Override public void exitLogic_op(simpleParser.Logic_opContext ctx) { }
	
	@Override public void enterLog_oprnd(simpleParser.Log_oprndContext ctx) { }
	
	@Override public void exitLog_oprnd(simpleParser.Log_oprndContext ctx) { }
	
	@Override public void enterCompare_op(simpleParser.Compare_opContext ctx) { }
	
	@Override public void exitCompare_op(simpleParser.Compare_opContext ctx) { }
	
	@Override public void enterComp_oprnd(simpleParser.Comp_oprndContext ctx) { }
	
	@Override public void exitComp_oprnd(simpleParser.Comp_oprndContext ctx) { }
	
	@Override public void enterFun_call(simpleParser.Fun_callContext ctx) { }
	
	@Override public void exitFun_call(simpleParser.Fun_callContext ctx) { }
	
	@Override public void enterFun_name(simpleParser.Fun_nameContext ctx) { }
	
	@Override public void exitFun_name(simpleParser.Fun_nameContext ctx) { }
	
	@Override public void enterType(simpleParser.TypeContext ctx) { }
	
	@Override public void exitType(simpleParser.TypeContext ctx) { }
	
	@Override public void enterDeclared_type(simpleParser.Declared_typeContext ctx) { }
	
	@Override public void exitDeclared_type(simpleParser.Declared_typeContext ctx) { }
	
	@Override public void enterStruct_type(simpleParser.Struct_typeContext ctx) { }
	
	@Override public void exitStruct_type(simpleParser.Struct_typeContext ctx) { }
	
	@Override public void enterSeq_type(simpleParser.Seq_typeContext ctx) { }
	
	@Override public void exitSeq_type(simpleParser.Seq_typeContext ctx) { }
	
	@Override public void enterList_type(simpleParser.List_typeContext ctx) { }
	
	@Override public void exitList_type(simpleParser.List_typeContext ctx) { }
	
	@Override public void enterKit_type(simpleParser.Kit_typeContext ctx) { }
	
	@Override public void exitKit_type(simpleParser.Kit_typeContext ctx) { }
	
	@Override public void enterParam(simpleParser.ParamContext ctx) { }
	
	@Override public void exitParam(simpleParser.ParamContext ctx) { }

	
	@Override public void enterEveryRule(ParserRuleContext ctx) { }
	
	@Override public void exitEveryRule(ParserRuleContext ctx) { }
	
	@Override public void visitTerminal(TerminalNode node) { }
	
	@Override public void visitErrorNode(ErrorNode node) { }
}